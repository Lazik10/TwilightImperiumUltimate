//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TwilightImperiumUltimate.Web.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Rules {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Rules() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TwilightImperiumUltimate.Web.Resources.Rules", typeof(Rules).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Cards and faction sheets each have abilities that players can resolve to trigger various game effects.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;If information in this Rules Reference contradicts the Learn to Play booklet, the Rules Reference takes precedence.&lt;/li&gt;
        ///    &lt;li&gt;If a card ability contradicts information in the Rules Reference, the card takes precedence. If both the card and the rules can be followed at the same time, they should be.&lt;/li&gt;
        ///    &lt;li&gt;Each ability describes when and how a player can reso [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Abilities {
            get {
                return ResourceManager.GetString("RuleCategory_Abilities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Action cards provide players with various abilities that they can resolve as described on the cards.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each player draws one action card during each status phase.&lt;/li&gt;
        ///    &lt;li&gt;Players can draw action cards by resolving the primary and secondary abilities of the &lt;i&gt;Politics&lt;/i&gt; strategy card.&lt;/li&gt;
        ///    &lt;li&gt;When a player draws an action card, they take the top card from the action card deck and add it to their hand of action cards.&lt;/li&gt;
        ///    &lt;li&gt;Each player&amp;rsquo;s hand ca [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ActionCards {
            get {
                return ResourceManager.GetString("RuleCategory_ActionCards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the action phase, each player takes a turn in initiative order. During a player&amp;rsquo;s turn, they perform a single action. After each player has taken a turn, player turns begin again in initiative order. This process continues until all players have passed.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During a player&amp;rsquo;s turn, they may perform one of the following three types of actions: a strategic action, a tactical action, or a component action.&lt;/li&gt;
        ///    &lt;li&gt;If a player cannot perform an action, t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ActionPhase {
            get {
                return ResourceManager.GetString("RuleCategory_ActionPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The active player is the player taking a turn during the action phase.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, the player who is first in initiative order is the first active player.&lt;/li&gt;
        ///    &lt;li&gt;After the active player takes a turn, the next player in initiative order becomes the active player.&lt;/li&gt;
        ///    &lt;li&gt;After the last player in initiative order takes a turn, the player who is first in initiative order becomes the active player again, and turns begin again in initiative order, i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ActivePlayer {
            get {
                return ResourceManager.GetString("RuleCategory_ActivePlayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The active system is the system that is activated during a tactical action.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When a player performs a tactical action, they activate a system by placing a command token from their tactic pool in that system. That system is the active system.&lt;/li&gt;
        ///    &lt;li&gt;A player &lt;b&gt;cannot&lt;/b&gt; activate a system that already contains one of their command tokens.&lt;/li&gt;
        ///    &lt;li&gt;A player &lt;b&gt;can&lt;/b&gt; activate a system that contains command tokens that match other players&amp;rsquo; factions.&lt;/li&gt; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ActiveSystem {
            get {
                return ResourceManager.GetString("RuleCategory_ActiveSystem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Two system tiles are adjacent to each other if any of the tiles&amp;rsquo; sides are touching each other.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A system that has a wormhole is treated as being adjacent to a system that has a matching wormhole.&lt;/li&gt;
        ///    &lt;li&gt;A unit or planet is adjacent to all system tiles that are adjacent to the system tile that contains that unit or planet.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;A system is not adjacent to itself.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;A planet is treated as being adjacent to the system that contain [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Adjacency {
            get {
                return ResourceManager.GetString("RuleCategory_Adjacency", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Agenda cards represent galactic laws and policies. During each agenda phase, players cast votes for specific outcomes on two agenda cards.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;There are two types of agenda cards: laws and directives.&lt;/li&gt;
        ///    &lt;li&gt;Laws can permanently change the rules of the game.&lt;/li&gt;
        ///    &lt;li&gt;When resolving a law, if a &amp;ldquo;For&amp;rdquo; outcome received the most votes, or if the law requires an election, the law&amp;rsquo;s ability becomes a permanent part of the game. Players resolve the ou [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_AgendaCard {
            get {
                return ResourceManager.GetString("RuleCategory_AgendaCard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the agenda phase, players can cast votes on agendas that can change the rules of the game.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players skip the agenda phase during the early portion of each game. After the custodians token is removed from Mecatol Rex, the agenda phase is added to each game round. To resolve the agenda phase, players perform the following steps:&lt;/li&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1 &amp;ndash; First Agenda&lt;/b&gt;: Players resolve the first agenda by following these steps in order:&lt;/li&gt;
        ///    &lt;ol class=&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_AgendaPhase {
            get {
                return ResourceManager.GetString("RuleCategory_AgendaPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;An anomaly is a system tile that has unique rules.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;An anomaly is identified by a red border located on the tile&amp;rsquo;s corners.&lt;/li&gt;
        ///    &lt;li&gt;There are four types of anomalies: asteroid fields, nebulae, supernovas, and gravity rifts.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Some anomalies contain planets; those systems are still anomalies.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;Each type of anomaly is identified by its art. &lt;code&gt;See rulebook for images.&lt;/code&gt;&lt;/li&gt;
        ///    &lt;li&gt;Abilities can cause a system tile to [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Anomalies {
            get {
                return ResourceManager.GetString("RuleCategory_Anomalies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A unit with the &lt;sc&gt;Anti&amp;ndash;Fighter Barrage&lt;/sc&gt; ability may be able to destroy an opponent&amp;rsquo;s fighters at the onset of a space battle. During the &lt;b&gt;Anti&amp;ndash;Fighter Barrage&lt;/b&gt; step of the first round of space combat, players perform the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1&lt;/b&gt;: Each player rolls dice for each of their units in the combat that has the &lt;sc&gt;Anti&amp;ndash;Fighter Barrage&lt;/sc&gt; ability; this is called an anti&amp;ndash;fighter barrage roll. A hit is produced for  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_AntiFighterBarrage {
            get {
                return ResourceManager.GetString("RuleCategory_AntiFighterBarrage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;An asteroid field is an anomaly that affects movement.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A ship cannot move through or into an asteroid field.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_AsteroidField {
            get {
                return ResourceManager.GetString("RuleCategory_AsteroidField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some game effects instruct a player to attach a card to a planet card. The attached card modifies that planet card in some way.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;To attach a card to a planet card, a player places the card with the attach effect partially underneath the planet card.&lt;/li&gt;
        ///    &lt;li&gt;If a player gains or loses control of planet that contains a card with an attach effect, the attached card stays with that planet.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;The attached card maintains its exhausted or readied [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Attach {
            get {
                return ResourceManager.GetString("RuleCategory_Attach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During combat, the active player is the attacker.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Attacker {
            get {
                return ResourceManager.GetString("RuleCategory_Attacker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A player&amp;rsquo;s unit with &lt;sc&gt;Production&lt;/sc&gt; is blockaded if it is in a system that does not contain any of their ships and contains other players&amp;rsquo; ships.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A player cannot use a blockaded unit to produce ships; that player can still use a blockaded unit to produce ground forces.&lt;/li&gt;
        ///    &lt;li&gt;When a player blockades another player&amp;rsquo;s space dock, if the blockaded player has captured any of the blockading player&amp;rsquo;s units, those units are returned to the b [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Blockaded {
            get {
                return ResourceManager.GetString("RuleCategory_Blockaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A unit with the &lt;sc&gt;Bombardment&lt;/sc&gt; ability may be able to destroy another player&amp;rsquo;s ground forces during an invasion. During the &lt;b&gt;Bombardment&lt;/b&gt; step, players perform the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1&lt;/b&gt; &amp;ndash; The active player chooses which planet each of their units that has a &lt;sc&gt;Bombardment&lt;/sc&gt; ability will bombard. Then, that player rolls dice for each of those units; this is called a bombardment roll. A hit is produced for each die roll that is equal to [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Bombardment {
            get {
                return ResourceManager.GetString("RuleCategory_Bombardment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Capacity is an attribute of some units that is presented on faction sheets and unit upgrade technology cards.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A unit&amp;rsquo;s capacity value indicates the maximum combined number of fighters and ground forces that it can transport.&lt;/li&gt;
        ///    &lt;li&gt;The combined capacity values of a player&amp;rsquo;s ships in a system determine the number of fighters and ground forces that player can have in that system&amp;rsquo;s space area.&lt;/li&gt;
        ///    &lt;li&gt;If a player has more fighters and ground  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Capacity {
            get {
                return ResourceManager.GetString("RuleCategory_Capacity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some abilities instruct a player to capture a unit, preventing the unit&amp;rsquo;s original owner from using it.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;If a player captures a non&amp;ndash;fighter ship or mech, they place it on their faction sheet. When such a unit is returned, it is placed into the reinforcements of the original owner.&lt;/li&gt;
        ///    &lt;li&gt;A captured non&amp;ndash;fighter ship or mech is returned under the following circumstances:&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;If the player who captured the unit agrees to retu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Capture {
            get {
                return ResourceManager.GetString("RuleCategory_Capture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Combat is an attribute of some units that is presented on faction sheets and unit upgrade technology cards.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During combat, if a unit&amp;rsquo;s combat roll produces a result equal to or greater than its combat value, it produces a hit.&lt;/li&gt;
        ///    &lt;li&gt;If a unit&amp;rsquo;s combat value contains two or more burst icons, instead of rolling a single die, the player rolls one die for each burst icon when making that unit&amp;rsquo;s combat rolls.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Combat {
            get {
                return ResourceManager.GetString("RuleCategory_Combat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Each player has a command sheet that contains a strategy pool, a tactic pool, a fleet pool, a trade good area, and a quick reference.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The pools on the command sheet are where players place their command tokens. Command tokens in a player&amp;rsquo;s pools are used by that player to perform strategic and tactical actions and to increase the number of ships that player can have in each system.&lt;/li&gt;
        ///    &lt;li&gt;The trade good area on the command sheet is where a player places the [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_CommandSheet {
            get {
                return ResourceManager.GetString("RuleCategory_CommandSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Command tokens are a currency that players use to perform actions and expand their fleets.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each player begins the game with eight tokens on their command sheet: three in their tactic pool, three in their fleet pool, and two in their strategy pool.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Command tokens in the strategy and tactic pool are placed with the faction symbol faceup.&lt;/li&gt;
        ///        &lt;li&gt;Command tokens in the fleet pool are placed with the ship silhouette faceup.&lt;/li&gt;
        ///    &lt;/o [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_CommandTokens {
            get {
                return ResourceManager.GetString("RuleCategory_CommandTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Commodities represent goods that are plentiful for their own faction and are desired by other factions. A commodity has no inherent game effects, but converts into a trade good if given to or received from another player.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Commodities and trade goods are represented by opposite sides of the same token.&lt;/li&gt;
        ///    &lt;li&gt;The commodity value on a player&amp;rsquo;s faction sheet indicates the maximum number of commodities that player can have.&lt;/li&gt;
        ///    &lt;li&gt;When an effect instruct [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Commodities {
            get {
                return ResourceManager.GetString("RuleCategory_Commodities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A component action is a type of action that a player can perform during their turn of an action phase.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Component actions can be found on various game components, including action cards, technology cards, leaders, exploration cards, relics, promissory notes, and faction sheets. Each component action is indicated by an &amp;ldquo;Action&amp;rdquo; header.&lt;/li&gt;
        ///    &lt;li&gt;To perform a component action, a player reads the action&amp;rsquo;s text and follows the instructions as described. [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ComponentAction {
            get {
                return ResourceManager.GetString("RuleCategory_ComponentAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;If a component type is depleted during the game, players obey the following rules:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Dice: Dice are limitless. If a player needs to roll more dice than the game provides, that player should roll as many as possible, record the results, and then reroll dice as necessary.&lt;/li&gt;
        ///    &lt;li&gt;Tokens: Tokens are limited to those included in the game, except for the following:&lt;/li&gt;
        ///    &lt;ul&gt;
        ///        &lt;li&gt;Control Tokens&lt;/li&gt;
        ///        &lt;li&gt;Fighter Tokens&lt;/li&gt;
        ///        &lt;li&gt;Trade Good To [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ComponentLimitations {
            get {
                return ResourceManager.GetString("RuleCategory_ComponentLimitations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Construction&lt;/i&gt; strategy card allows players to construct structures on planets they control. This card&amp;rsquo;s initiative value is &amp;ldquo;4&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Construction&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/li&gt;
        ///    &lt;li&gt;To resolve the primary ability on the &lt;i&gt;Construction&lt;/i&gt; strategy card, the active player may place either one PDS or one space doc [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Construction {
            get {
                return ResourceManager.GetString("RuleCategory_Construction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Each player begins the game with control of each planet in their home system. During the game, players can gain control of additional planets.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When a player gains control of a planet, they take the planet card that corresponds to that planet and place it in their play area; that card is exhausted.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;If a player is the first player to control a planet, they take the planet card from the planet card deck.&lt;/li&gt;
        ///        &lt;li&gt;If another player contr [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Control {
            get {
                return ResourceManager.GetString("RuleCategory_Control", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Cost is an attribute of some units that is presented on faction sheets and unit upgrade technology cards. A unit&amp;rsquo;s cost determines the number of resources a player must spend to produce that unit.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;To produce a unit, a player must spend a number of resources equal to or greater than the cost of the unit they are producing.&lt;/li&gt;
        ///    &lt;li&gt;If the cost is accompanied by two icons &amp;ndash; typically for fighters and ground forces &amp;ndash; a player produces two of that uni [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Cost {
            get {
                return ResourceManager.GetString("RuleCategory_Cost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The custodians token begins each game on Mecatol Rex. The token represents the caretakers that safeguard the seat of the empire until such time as the galactic council can be reconvened.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Units can move into the system that contains Mecatol Rex following normal rules; however, players cannot commit ground forces to land on Mecatol Rex until the custodians token is removed from the planet.&lt;/li&gt;
        ///    &lt;li&gt;Before the &lt;b&gt;Commit Ground Forces&lt;/b&gt; step of an invasion, the activ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_CustodiansToken {
            get {
                return ResourceManager.GetString("RuleCategory_CustodiansToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A deal is an agreement between two players that may or may not include a transaction that involves physical components.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players can make deals with each other at any time, even if they are not neighbors. However, deals that include a transaction must follow the rules for transactions, including that the players be neighbors.&lt;/li&gt;
        ///    &lt;li&gt;Deals are binding or non&amp;ndash;binding according to the conditions of the deal.&lt;/li&gt;
        ///    &lt;li&gt;If the terms of a deal can be resolved  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Deals {
            get {
                return ResourceManager.GetString("RuleCategory_Deals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During either a space or ground combat, the player who is not the active player is the defender.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Defender {
            get {
                return ResourceManager.GetString("RuleCategory_Defender", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some units have deploy abilities. Deploy abilities are indicated by the &lt;sc&gt;Deploy&lt;/sc&gt; header and provide the means to place specific units on the game board without producing them as normal.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A player can use a unit&amp;rsquo;s &lt;sc&gt;Deploy&lt;/sc&gt; ability when the ability&amp;rsquo;s conditions are met to place that unit on the game board.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;A player does not have to spend resources to deploy a unit unless otherwise specified.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;A player can only r [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Deploy {
            get {
                return ResourceManager.GetString("RuleCategory_Deploy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Various game effects can cause a unit to be destroyed. When a player&amp;rsquo;s unit is destroyed, it is removed from the game board and returned to their reinforcements.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When a player assigns hits that were produced against their units, that player chooses a number of their units to be destroyed equal to the number of hits produced against those units.&lt;/li&gt;
        ///    &lt;li&gt;If a player&amp;rsquo;s unit is removed from the board by a game effect, it is not treated as being destroyed;  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Destroyed {
            get {
                return ResourceManager.GetString("RuleCategory_Destroyed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Diplomacy&lt;/i&gt; strategy card can be used to preemptively prevent other players from activating a specific system. It can also be used to ready planets. This card&amp;rsquo;s initiative value is &amp;ldquo;2&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Diplomacy&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/li&gt;
        ///    &lt;li&gt;To resolve the primary ability on the &lt;i&gt;Diplomacy&lt;/i&gt; strategy card, the activ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Diplomacy {
            get {
                return ResourceManager.GetString("RuleCategory_Diplomacy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A player who is eliminated is no longer part of the game.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A player is eliminated when they meet &lt;b&gt;all&lt;/b&gt; of the following three conditions:&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;The player has no ground forces on the game board.&lt;/li&gt;
        ///        &lt;li&gt;The player has no unit that has &lt;sc&gt;Production&lt;/sc&gt;.&lt;/li&gt;
        ///        &lt;li&gt;The player does not control any planets.&lt;/li&gt;
        ///    &lt;/ol&gt;
        ///    &lt;li&gt;When a player becomes eliminated, all of the units, command tokens, control tokens, promissory not [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Elimination {
            get {
                return ResourceManager.GetString("RuleCategory_Elimination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some cards can be exhausted. A player cannot resolve abilities or spend the resources or influence of an exhausted card.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;To exhaust a card, a player flips the card facedown.&lt;/li&gt;
        ///    &lt;li&gt;During the &lt;b&gt;Ready Cards&lt;/b&gt; step of the status phase, each player readies all of their exhausted cards by flipping those cards faceup.&lt;/li&gt;
        ///    &lt;li&gt;A player exhausts their planet cards to spend either the resources or influence on that card.&lt;/li&gt;
        ///    &lt;li&gt;Abilities, including some f [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Exhausted {
            get {
                return ResourceManager.GetString("RuleCategory_Exhausted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Planets and some space areas can be explored, yielding varying results determined by the cards drawn from the exploration decks.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When a player takes control of a planet that is not already controlled by another player, they explore that planet.&lt;/li&gt;
        ///    &lt;li&gt;When a player explores a planet, they draw and resolve a card from the exploration deck that corresponds to that planet&amp;rsquo;s trait.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;There are three planetary exploration decks, each of [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Exploration {
            get {
                return ResourceManager.GetString("RuleCategory_Exploration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A fighter token functions as a plastic fighter unit for all game purposes.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When producing a fighter unit, a player can use a fighter token from the supply instead of a plastic piece.&lt;/li&gt;
        ///    &lt;li&gt;Players can replace their plastic fighters with tokens at any time.&lt;/li&gt;
        ///    &lt;li&gt;If a player ever has a fighter token in a system that does not contain one of their plastic fighters, that player must replace it with a plastic fighter from their reinforcements.&lt;/li&gt;
        ///    &lt;ol&gt;&lt; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_FighterTokens {
            get {
                return ResourceManager.GetString("RuleCategory_FighterTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The fleet pool is an area of a player&amp;rsquo;s command sheet.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The number of command tokens in a player&amp;rsquo;s fleet pool indicates the maximum number of non&amp;ndash;fighter ships that a player can have in a system.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Units that are on planets or that count against a player&amp;rsquo;s capacity do not count against that player&amp;rsquo;s fleet pool.&lt;/li&gt;
        ///        &lt;li&gt;Units that are being transported through systems do not count against a player&amp;rsquo;s f [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_FleetPool {
            get {
                return ResourceManager.GetString("RuleCategory_FleetPool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Frontier tokens can be explored for a variety of game effects.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Frontier tokens are placed on the game board during setup. One frontier token is placed in each system that does not contain any planets.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Frontier tokens are not placed on hyperlane tiles.&lt;/li&gt;
        ///        &lt;li&gt;A system cannot have more than one frontier token.&lt;/li&gt;
        ///        &lt;li&gt;Frontier tokens are placed in anomalies that do not have planets.&lt;/li&gt;
        ///        &lt;li&gt;A frontier token is pla [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_FrontierTokens {
            get {
                return ResourceManager.GetString("RuleCategory_FrontierTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The game board consists of all system tiles in play.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The game board consists of all system tiles that were placed during setup, even if the sides of those tiles do not touch any other system tiles, such as the Ghosts of Creuss&amp;rsquo; home system.&lt;/li&gt;
        ///    &lt;li&gt;A system tile is on the edge of the game board if any of its sides are not touching another system tile.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;The Ghosts of Creuss home system and the wormhole nexus are on the edge of the game board. [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_GameBoard {
            get {
                return ResourceManager.GetString("RuleCategory_GameBoard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A game round consists of the following four phases:
        ///&lt;ol&gt;
        ///    &lt;li&gt;Strategy Phase&lt;/li&gt;
        ///    &lt;li&gt;Action Phase&lt;/li&gt;
        ///    &lt;li&gt;Status Phase&lt;/li&gt;
        ///    &lt;li&gt;Agenda Phase&lt;/li&gt;
        ///&lt;/ol&gt;&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players skip the agenda phase during the early portion of each game. After the custodians token is removed from Mecatol Rex, the agenda phase is added to each game round.&lt;/li&gt;
        ///    &lt;li&gt;Player turns occur during the action phase.&lt;/li&gt;
        ///    &lt;li&gt;Abilities that last until the end of a player&amp;rsquo;s tu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_GameRound {
            get {
                return ResourceManager.GetString("RuleCategory_GameRound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A gravity rift is an anomaly that affects movement.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A ship that will move out of or through a gravity rift at any time during its movement, applies +1 to its move value.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;This can allow a ship to reach the active system from farther away than it normally could.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;For each ship that would move out of or through a gravity rift, one die is rolled immediately before it exits the gravity rift system; on a result of 1&amp;ndash;3, that ship is re [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_GravityRift {
            get {
                return ResourceManager.GetString("RuleCategory_GravityRift", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the &lt;b&gt;Ground Combat&lt;/b&gt; step of an invasion, if the active player has ground forces on a planet that contains another player&amp;rsquo;s ground forces, those players resolve a ground combat on that planet. To resolve a ground combat, players perform the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1 &amp;ndash; Roll Dice&lt;/b&gt;: Each player rolls one die for each ground force they have on the planet; this is a combat roll. If a unit&amp;rsquo;s combat roll produces a result that is equal to or gr [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_GroundCombat {
            get {
                return ResourceManager.GetString("RuleCategory_GroundCombat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A ground force is a type of unit. All infantry and mech units in the game are ground forces. Some races have unique infantry units.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Ground forces are always on planets, in a space area with ships that have capacity values, or being transported by those ships.&lt;/li&gt;
        ///    &lt;li&gt;Ground forces being transported by a ship are placed in a system&amp;rsquo;s space area along with the ship that is transporting them.&lt;/li&gt;
        ///    &lt;li&gt;There is no limit to the number of ground forces a play [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_GroundForces {
            get {
                return ResourceManager.GetString("RuleCategory_GroundForces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Hyperlanes are tiles that are used in some game board setups to create adjacency of system tiles that are not touching each other.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Systems that are connected by lines drawn across one or more hyperlane tiles are adjacent for all purposes.&lt;/li&gt;
        ///    &lt;li&gt;Hyperlane tiles are not systems. They cannot have units on them and they cannot be targets for effects or abilities.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Hyperlanes {
            get {
                return ResourceManager.GetString("RuleCategory_Hyperlanes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Imperial&lt;/i&gt; strategy card allows players to score victory points and draw secret objectives. This card&amp;rsquo;s initiative value is &amp;ldquo;8&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Imperial&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/li&gt;
        ///    &lt;li&gt;To resolve the primary ability on the &lt;i&gt;Imperial&lt;/i&gt; strategy card, the active player can score one public objective of their choice if  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Imperial {
            get {
                return ResourceManager.GetString("RuleCategory_Imperial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;An infantry token functions as a plastic infantry unit for all game purposes.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When producing an infantry unit, a player can use an infantry token from the supply instead of a plastic piece.&lt;/li&gt;
        ///    &lt;li&gt;Players can replace their plastic infantry with tokens at any time.&lt;/li&gt;
        ///    &lt;li&gt;If a player ever has an infantry token on a planet that does not contain one of their plastic infantry or in the space area of a system that does not contain one of their plastic infantry, [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_InfantryTokens {
            get {
                return ResourceManager.GetString("RuleCategory_InfantryTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Influence represents a planet&amp;rsquo;s political power. Players spend influence to gain command tokens using the &lt;i&gt;Leadership&lt;/i&gt; strategy card, and the influence values of planets are used to cast votes during the agenda phase.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A planet&amp;rsquo;s influence is the rightmost value (surrounded by a blue border) found on the planet&amp;rsquo;s system tile and planet card.&lt;/li&gt;
        ///    &lt;li&gt;A player can spend a planet&amp;rsquo;s influence by exhausting that planet&amp;rsquo;s card.&lt;/li&gt;
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Influence {
            get {
                return ResourceManager.GetString("RuleCategory_Influence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Initiative order is the order in which players resolve steps of the action and status phases.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Initiative order is determined by the initiative numbers on strategy cards.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;A player who has the Naalu &amp;ldquo;0&amp;rdquo; token has the initiative number &amp;ldquo;0&amp;rdquo;.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;Initiative order begins with the player who has the lowest&amp;ndash;numbered strategy card and proceeds to the player who has the strategy card that is next in numerical order.&lt;/ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_InitiativeOrder {
            get {
                return ResourceManager.GetString("RuleCategory_InitiativeOrder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Invasion is a step of the tactical action during which the active player can land ground forces on planets to gain control of those planets.&lt;/p&gt;
        ///&lt;p&gt;To resolve an invasion, players perform the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1 &amp;ndash; Bombardment&lt;/b&gt;: The active player may use the &lt;sc&gt;Bombardment&lt;/sc&gt; ability of any of their units in the active system.&lt;/li&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 2 &amp;ndash; Commit Ground Forces&lt;/b&gt;: If the active player has ground forces in the space area of the acti [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Invasion {
            get {
                return ResourceManager.GetString("RuleCategory_Invasion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Each player has several faction&amp;ndash;specific leader cards that represent characters with unique abilities.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each faction has three leaders; one agent, one commander, and one hero.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;The Nomad&amp;rsquo;s &lt;sc&gt;The Company&lt;/sc&gt; faction ability grants them two additional agents, for a total of five leaders.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;A player&amp;rsquo;s leaders are placed on their leader sheet during setup.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Each leader card is placed on the slo [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Leaders {
            get {
                return ResourceManager.GetString("RuleCategory_Leaders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Each player has a leader sheet that contains slots for their faction&amp;rsquo;s three leader cards as well as their faction&amp;rsquo;s mech unit card. &lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The leader slots of the leader sheet are where players place their three leader cards during setup. Each slot displays the name of the type of leader that is placed in that slot (agent, commander, and hero) as well as a symbol in the upper&amp;ndash;right that helps players quickly determine which side of those leaders begins the  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_LeaderSheet {
            get {
                return ResourceManager.GetString("RuleCategory_LeaderSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Leadership&lt;/i&gt; strategy card allows players to gain command tokens. This card&amp;rsquo;s initiative value is &amp;ldquo;1&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Leadership&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/li&gt;
        ///    &lt;li&gt;To resolve the primary ability on the &lt;i&gt;Leadership&lt;/i&gt; strategy card, the active player gains three command tokens. Then, that player can spend any amount of th [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Leadership {
            get {
                return ResourceManager.GetString("RuleCategory_Leadership", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Legendary planets grant the player that controls them unique, planet&amp;ndash;specific abilities.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A legendary planet is indicated by the legendary planet icon.&lt;/li&gt;
        ///    &lt;li&gt;When a player gains control of a legendary planet, they also place its legendary planet ability card in their play area.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;If a player gains control of a legendary planet ability card from the deck, it is readied.&lt;/li&gt;
        ///        &lt;li&gt;If a player gains control of an exhausted leg [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_LegendaryPlanets {
            get {
                return ResourceManager.GetString("RuleCategory_LegendaryPlanets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Mecatol Rex is the planet placed in the center of the game board during setup.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During setup, the custodians token is placed on Mecatol Rex. This token prevents a player from committing ground forces to land on the planet unless they spend six influence to remove the token.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_MecatolRex {
            get {
                return ResourceManager.GetString("RuleCategory_MecatolRex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Mechs are unique, faction&amp;ndash;specific heavy ground forces.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Mechs are a type of ground force and can be transported and participate in ground combat.&lt;/li&gt;
        ///    &lt;li&gt;Each player begins with their mech unit card in play on their leader sheet and can produce mechs for the cost presented on the card.&lt;/li&gt;
        ///    &lt;li&gt;Some mechs have &lt;sc&gt;Deploy&lt;/sc&gt; abilities which allow a player to place them on the game board without producing them normally.&lt;/li&gt;
        ///    &lt;li&gt;Mech unit cards are [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Mechs {
            get {
                return ResourceManager.GetString("RuleCategory_Mechs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A modifier is a number that is applied by an ability to increase or decrease the attribute values of a unit or the results of a die roll.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A modifier is always preceded by the word &amp;ldquo;apply&amp;rdquo; followed by a numerical value.&lt;/li&gt;
        ///    &lt;li&gt;A modifier value preceded by a &amp;ldquo;+&amp;rdquo; is added to the attribute or result being modified; a modifier value preceded by a &amp;ldquo;&amp;minus;&amp;rdquo; is subtracted from the attribute or result being modified.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Modifiers {
            get {
                return ResourceManager.GetString("RuleCategory_Modifiers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Move is an attribute of some units that is presented on faction sheets and unit upgrade technology cards.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A unit&amp;rsquo;s move value indicates the distance from its current system that it can move during the &lt;b&gt;Movement&lt;/b&gt; step of a tactical action.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Move {
            get {
                return ResourceManager.GetString("RuleCategory_Move", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A player can move their ships by resolving a tactical action during the action phase. Additionally, some abilities can move a unit outside of the tactical action.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;b&gt;&lt;li&gt;Tactical Action Movement&lt;/li&gt;&lt;/b&gt;
        ///    &lt;li&gt;A ship&amp;rsquo;s move value is presented along with its other attributes on faction sheets and unit upgrade technology cards. This value indicates the distance from its current system that a ship can move.&lt;/li&gt;
        ///    &lt;p&gt;To resolve movement, players perform the followi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Movement {
            get {
                return ResourceManager.GetString("RuleCategory_Movement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A nebula is an anomaly that affects movement and combat.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A ship can only move into a nebula if it is the active system.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;A ship cannot move through a nebula. That is, a ship cannot move into and out of a nebula during the same movement.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;A ship that begins the &lt;b&gt;Movement&lt;/b&gt; step of a tactical action in a nebula treats its move value as &amp;ldquo;1&amp;rdquo; for the duration of that step.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Other abilities and effects can in [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Nebula {
            get {
                return ResourceManager.GetString("RuleCategory_Nebula", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Two players are neighbors if they both have a unit or control a planet in the same system. They are also neighbors if they both have a unit or control a planet in systems that are adjacent to each other.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players can resolve transactions with their neighbors.&lt;/li&gt;
        ///    &lt;li&gt;Players are neighbors if the adjacency of systems is granted by a wormhole.&lt;/li&gt;
        ///    &lt;li&gt;Players are neighbors with the Ghosts of Creuss if the Ghosts of Creuss&amp;rsquo; &amp;ldquo;Quantum Entanglement&amp;rdqu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Neighbors {
            get {
                return ResourceManager.GetString("RuleCategory_Neighbors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Players can score objectives to gain victory points.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;There are two types of objective cards: public objectives and secret objectives.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Each public objective has a &amp;ldquo;I&amp;rdquo; or &amp;ldquo;II&amp;rdquo; on the back of its card; all other objectives are secret objectives.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;Each objective card indicates a number of victory points that a player gains by scoring that objective.&lt;/li&gt;
        ///    &lt;li&gt;Each objective card indicates the phase during which [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ObjectiveCards {
            get {
                return ResourceManager.GetString("RuleCategory_ObjectiveCards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During combat, a player&amp;rsquo;s opponent is the other player that either has ships in the system at the start of the space combat or has ground forces on the planet at the start of a ground combat.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players who do not have units on either side of a combat are not opponents. Those players cannot use abilities or have abilities used against them that are used against an opponent.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Opponent {
            get {
                return ResourceManager.GetString("RuleCategory_Opponent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A PDS (planetary defense system) is a structure that allows a player to defend their territory against invading forces.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each PDS has the &lt;sc&gt;Space Cannon&lt;/sc&gt; ability.&lt;/li&gt;
        ///    &lt;li&gt;The primary way by which players acquire PDS units is by resolving either the primary or secondary ability of the &lt;i&gt;Construction&lt;/i&gt; strategy card.&lt;/li&gt;
        ///    &lt;li&gt;A PDS unit is placed on a planet. Each planet can have a maximum of &lt;b&gt;two&lt;/b&gt; PDS units.&lt;/li&gt;
        ///    &lt;li&gt;If a player&amp;rsquo;s PDS i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Pds {
            get {
                return ResourceManager.GetString("RuleCategory_Pds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Units cannot use the &lt;sc&gt;Bombardment&lt;/sc&gt; ability against a planet that contains a unit that has the &lt;sc&gt;Planetary Shield&lt;/sc&gt; ability.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The &lt;sc&gt;Planetary Shield&lt;/sc&gt; ability does not prevent a planet from being affected by the &lt;i&gt;X&amp;ndash;89 Bacterial Weapon&lt;/i&gt; technology.&lt;/li&gt;
        ///    &lt;li&gt;The &lt;sc&gt;Planetary Shield&lt;/sc&gt; ability prevents an L1Z1X player from using their &lt;sc&gt;Harrow&lt;/sc&gt; faction ability.&lt;/li&gt;
        ///    &lt;li&gt;If a war sun is in a system with any number of other player [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_PlanetaryShield {
            get {
                return ResourceManager.GetString("RuleCategory_PlanetaryShield", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Planets provide players with resources and influence. Planets are on system tiles and each has a name, a resource value, and an influence value. Some planets also have traits.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A planet&amp;rsquo;s resources are indicated by the value on its planet card and system tile that is surrounded by a yellow triangular border.&lt;/li&gt;
        ///    &lt;li&gt;A planet&amp;rsquo;s influence is indicated by the value on its planet card and system tile that is surrounded by a blue hexagonal border.&lt;/li&gt;
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Planets {
            get {
                return ResourceManager.GetString("RuleCategory_Planets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Politics&lt;/i&gt; strategy card allows players to draw action cards. Additionally, the active player chooses a new speaker and looks at cards in the agenda deck. This card&amp;rsquo;s initiative value is &amp;ldquo;3&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Politics&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/li&gt;
        ///    &lt;li&gt;To resolve the primary ability on the &lt;i&gt;Politics&lt;/i&gt; strategy card, the a [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Politics {
            get {
                return ResourceManager.GetString("RuleCategory_Politics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The primary way that a player produces new units is by resolving the &lt;sc&gt;Production&lt;/sc&gt; abilities of existing units during a tactical action. However, other game effects also allow players to produce units.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each unit that a player can produce has a cost value presented on its faction sheet or technology card. To produce a unit, a player must spend a number of resources equal to or greater than the cost value of the unit they are producing.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;S [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ProducingUnits {
            get {
                return ResourceManager.GetString("RuleCategory_ProducingUnits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the &lt;b&gt;Production&lt;/b&gt; step of a tactical action, the active player can resolve the &lt;sc&gt;Production&lt;/sc&gt; ability of each of their units that are in the active system to produce units&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A unit&amp;rsquo;s &lt;sc&gt;Production&lt;/sc&gt; ability, which is presented on a faction sheet or unit upgrade technology card, is always followed by a value. This value is the maximum number of units that this unit can produce.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;If the active player has multiple units in [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Production {
            get {
                return ResourceManager.GetString("RuleCategory_Production", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Each player begins the game with one unique and five generic promissory note cards that can be given to other players.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each promissory note contains timing text and ability text. A player can resolve any of their promissory note cards by following the text on the card.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Promissory notes are &lt;b&gt;not&lt;/b&gt; mandatory unless otherwise specified.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;A player cannot play their color&amp;rsquo;s or faction&amp;rsquo;s promissory notes. Since the cards are [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_PromissoryNotes {
            get {
                return ResourceManager.GetString("RuleCategory_PromissoryNotes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Purge is a cost that permanently removes a component from the game. If an ability requires that its component is purged, that component can only be used once per game.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;If an ability instructs a player to purge a component, that component is removed from the game and returned to the box.&lt;/li&gt;
        ///    &lt;li&gt;Purged components cannot be used or otherwise returned to the game by any means.&lt;/li&gt;
        ///    &lt;li&gt;When a player is instructed to purge a component, that component is purged ev [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Purge {
            get {
                return ResourceManager.GetString("RuleCategory_Purge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Cards have a readied state, which indicates that a player can exhaust or resolve the abilities on those cards.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A card that is readied is placed faceup in a player&amp;rsquo;s play area; a card that is exhausted is placed facedown in a player&amp;rsquo;s area.&lt;/li&gt;
        ///    &lt;li&gt;A player can exhaust a readied planet card to spend resources or influence from that card&amp;rsquo;s planet.&lt;/li&gt;
        ///    &lt;li&gt;A player can exhaust certain readied technology cards to resolve those cards&amp;rsquo; abil [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Readied {
            get {
                return ResourceManager.GetString("RuleCategory_Readied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A player&amp;rsquo;s reinforcements is that player&amp;rsquo;s personal supply of units and command tokens that are not on the game board or otherwise in use.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The components in a player&amp;rsquo;s reinforcements are limited.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Reinforcements {
            get {
                return ResourceManager.GetString("RuleCategory_Reinforcements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Relics are powerful artifacts with unique abilities.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players can use the abilities of hazardous, cultural, and industrial relic fragments in their play area to draw cards from the relic deck.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Relic fragments can be found when exploring planets and frontier tokens, and can be exchanged with other players as part of transactions.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;When a player is instructed to gain a relic, they draw the top card of the relic deck and place it faceup i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Relics {
            get {
                return ResourceManager.GetString("RuleCategory_Relics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some game effects instruct a player to reroll dice.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When a die is rerolled, its new result is used instead of its previous result.&lt;/li&gt;
        ///    &lt;li&gt;The same ability cannot be used to reroll the same die multiple times, but multiple abilities can be used to reroll a single die.&lt;/li&gt;
        ///    &lt;li&gt;Die rerolls must occur after rolling the dice, before other abilities are resolved.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Rerolls {
            get {
                return ResourceManager.GetString("RuleCategory_Rerolls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Resources represent a planet&amp;rsquo;s material value and industry. Many game effects, such as producing units, require players to spend resources.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A planet&amp;rsquo;s resources are the leftmost value that is surrounded by a yellow border on the planet&amp;rsquo;s system tile and planet card.&lt;/li&gt;
        ///    &lt;li&gt;A player spends a planet&amp;rsquo;s resources by exhausting its card.&lt;/li&gt;
        ///    &lt;li&gt;A player can spend a trade good as if it were one resource.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Resources {
            get {
                return ResourceManager.GetString("RuleCategory_Resources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A ship is a unit type consisting of carriers, cruisers, dreadnoughts, destroyers, fighters, and war suns. Each race also has a unique flagship.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Ships are always placed in space.&lt;/li&gt;
        ///    &lt;li&gt;A player can have a number of ships in a system equal to or less than the number of command tokens in that player&amp;rsquo;s fleet pool.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Fighters do not count toward the fleet pool limit, and instead count against a player&amp;rsquo;s capacity.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;Ships c [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Ships {
            get {
                return ResourceManager.GetString("RuleCategory_Ships", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A unit that has the &lt;sc&gt;Space Cannon&lt;/sc&gt; ability can use it during two different steps of a player&amp;rsquo;s tactical action: after the &lt;b&gt;Move Ships&lt;/b&gt; substep (&lt;b&gt;Space Cannon Offense&lt;/b&gt;) and during an invasion (&lt;b&gt;Space Cannon Defense&lt;/b&gt;).&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A player is &lt;b&gt;not&lt;/b&gt; required to be the active player to use their &lt;sc&gt;Space Cannon&lt;/sc&gt; ability of their units.&lt;/li&gt;
        ///    &lt;b&gt;&lt;li&gt;Space Cannon Offense&lt;/li&gt;&lt;/b&gt;
        ///    &lt;p&gt;During a tactical action, after the &lt;b&gt;Move Ships&lt;/b&gt; subst [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_SpaceCannon {
            get {
                return ResourceManager.GetString("RuleCategory_SpaceCannon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;After resolving the &lt;b&gt;Space Cannon Offense&lt;/b&gt; step of a tactical action, if two players have ships in the active system, those players must resolve a space combat.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;If the active player is the only player with ships in the system, they skip the &lt;b&gt;Space Combat&lt;/b&gt; step of the tactical action and proceeds to the &lt;b&gt;Invasion&lt;/b&gt; step.&lt;/li&gt;
        ///    &lt;li&gt;If an ability occurs &amp;ldquo;before combat&amp;rdquo;, it occurs immediately before the &lt;b&gt;Anti&amp;ndash;Fighter Barrage&lt;/b&gt; step.&lt;/ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_SpaceCombat {
            get {
                return ResourceManager.GetString("RuleCategory_SpaceCombat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A space dock is a structure that allows players to produce units.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each space dock has a &lt;sc&gt;Production&lt;/sc&gt; ability that indicates the number of units it can produce.&lt;/li&gt;
        ///    &lt;li&gt;The primary way in which players acquire space docks is by resolving either the primary or secondary abilities of the &lt;i&gt;Construction&lt;/i&gt; strategy card.&lt;/li&gt;
        ///    &lt;li&gt;Space docks are placed on planets. Each planet can have a maximum of &lt;b&gt;one&lt;/b&gt; space dock.&lt;/li&gt;
        ///    &lt;li&gt;If a player&amp;rsquo;s  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_SpaceDock {
            get {
                return ResourceManager.GetString("RuleCategory_SpaceDock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The speaker is the player who has the speaker token.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the strategy phase, the speaker is the first player to choose a strategy card.&lt;/li&gt;
        ///    &lt;li&gt;During the agenda phase, the speaker reveals the top agenda card from the agenda deck before each vote. The speaker is always the last player to vote and decides which outcome to resolve if the outcomes are tied.&lt;/li&gt;
        ///    &lt;li&gt;During setup, the speaker prepares the objectives.&lt;/li&gt;
        ///    &lt;li&gt;During the status phase, the  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Speaker {
            get {
                return ResourceManager.GetString("RuleCategory_Speaker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the status phase, players score objectives and prepare for the next game round. To resolve the status phase, players perform the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1 &amp;ndash; Score Objectives&lt;/b&gt;: Following initiative order, each player may score up to one public objective and one secret objective that can be fulfilled during the status phase. To score an objective, a player must fulfill the requirements on the card; if that player does, they gain a number of victory points [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_StatusPhase {
            get {
                return ResourceManager.GetString("RuleCategory_StatusPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the action phase, the active player may perform a strategic action to resolve the primary ability on their strategy card.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;After the active player resolves the primary ability on their strategy card, each other player, beginning with the player to the left of the active player and proceeding clockwise, may resolve that strategy card&amp;rsquo;s secondary ability.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Players do not have to resolve the secondary abilities of the active player&amp;rsquo;s stra [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_StrategicAction {
            get {
                return ResourceManager.GetString("RuleCategory_StrategicAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Strategy cards determine initiative order and provide each player with a powerful ability that they can use one time during the action phase.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the strategy phase, each player chooses a strategy card from the common play area and places it in their play area faceup.&lt;/li&gt;
        ///    &lt;li&gt;Each strategy card has a readied and an exhausted side.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;The readied side contains the strategy card&amp;rsquo;s name, initiative number, and abilities.&lt;/li&gt;
        ///       [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_StrategyCard {
            get {
                return ResourceManager.GetString("RuleCategory_StrategyCard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the strategy phase, each player chooses a strategy card to use during the round.&lt;/p&gt;
        ///&lt;p&gt;To resolve the strategy phase, players perform the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1&lt;/b&gt;: Starting with the speaker and proceeding clockwise, each player chooses one strategy card from the common play area and places it faceup in their play area.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;If there are one or more trade good tokens on a strategy card when a player chooses it, that player gains thos [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_StrategyPhase {
            get {
                return ResourceManager.GetString("RuleCategory_StrategyPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A structure is a type of unit. PDS units and space docks are structures.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Structures are always placed on planets.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;The Clan of Saar&amp;rsquo;s &amp;ldquo;Floating Factory&amp;rdquo; faction&amp;ndash;specific space dock is placed in a system&amp;rsquo;s space area.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;Structures are primarily placed on planets using the &lt;i&gt;Construction&lt;/i&gt; strategy card.&lt;/li&gt;
        ///    &lt;li&gt;Structures cannot move or be transported.&lt;/li&gt;
        ///    &lt;li&gt;A player can have a maximum of &lt;b [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Structures {
            get {
                return ResourceManager.GetString("RuleCategory_Structures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A supernova is an anomaly that affects movement.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A ship cannot move through or into a supernova.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Supernova {
            get {
                return ResourceManager.GetString("RuleCategory_Supernova", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some units have the &lt;sc&gt;Sustain Damage&lt;/sc&gt; ability. Immediately before a player assigns hits to their units, that player can use the &lt;sc&gt;Sustain Damage&lt;/sc&gt; ability of any of their units in the active system.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;For each &lt;sc&gt;Sustain Damage&lt;/sc&gt; ability that a player uses, one hit produced by another player&amp;rsquo;s units is canceled. Then, each unit using this ability is placed on its side to indicate that it is damaged.&lt;/li&gt;
        ///    &lt;li&gt;A damaged unit does not have reduced c [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_SustainDamage {
            get {
                return ResourceManager.GetString("RuleCategory_SustainDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A system tile represents an area of the galaxy. Players place system tiles during setup to create the game board.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The back of each system tile is colored green, blue, or red.&lt;/li&gt;
        ///    &lt;li&gt;System tiles with a green&amp;ndash;colored back are home systems and faction&amp;ndash;specific tiles. Each home system is unique to one of the game&amp;rsquo;s factions.&lt;/li&gt;
        ///    &lt;li&gt;System tiles with a blue&amp;ndash;colored back each contain one or more planets.&lt;/li&gt;
        ///    &lt;li&gt;System tiles with a [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_SystemTiles {
            get {
                return ResourceManager.GetString("RuleCategory_SystemTiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The tactical action is the primary method by which players produce units, move ships, and extend their dominion within the galaxy. To perform a tactical action, the active player performs the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1 &amp;ndash; Activation&lt;/b&gt;: The active player must activate a system that does not contain one of their command tokens.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;To activate a system, the active player places a command token from their tactic pool in that system. That syst [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_TacticalAction {
            get {
                return ResourceManager.GetString("RuleCategory_TacticalAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Technology&lt;/i&gt; strategy card allows players to research new technology. This card&amp;rsquo;s initiative value is &amp;ldquo;7&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Technology&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/li&gt;
        ///    &lt;li&gt;To resolve the primary ability on the &lt;i&gt;Technology&lt;/i&gt; strategy card, the active player can research one technology of their choice. Then, they may research [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Technology {
            get {
                return ResourceManager.GetString("RuleCategory_Technology", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Technology cards allow players to upgrade units and acquire powerful abilities.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each player places any technology they have gained faceup near their faction sheet. For the duration of the game, they &lt;b&gt;own&lt;/b&gt; any technology cards they gain and can use the abilities on those cards.&lt;/li&gt;
        ///    &lt;li&gt;A player does not own any technology card that is in their technology deck.&lt;/li&gt;
        ///    &lt;li&gt;A player can gain a technology card from their technology deck by researching technolog [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_TechnologySystem {
            get {
                return ResourceManager.GetString("RuleCategory_TechnologySystem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Trade&lt;/i&gt; strategy card allows players to gain trade goods and replenish commodities. This card&amp;rsquo;s initiative value is &amp;ldquo;5&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Trade&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability. To resolve the primary ability on the &lt;i&gt;Trade&lt;/i&gt; strategy card, the active player resolves the following effects in order:&lt;/li&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1&lt;/b&gt;: The acti [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Trade {
            get {
                return ResourceManager.GetString("RuleCategory_Trade", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A trade good represents a player&amp;rsquo;s buying and trading power beyond their planet&amp;rsquo;s raw resources.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Trade goods and commodities are represented by opposite sides of the same token.&lt;/li&gt;
        ///    &lt;li&gt;When a player gains a trade good, they take a trade good token from the supply and place it on the trade good area on their command sheet, making sure the trade good side is faceup.&lt;/li&gt;
        ///    &lt;li&gt;A player can spend trade goods at any time during the game.&lt;/li&gt;
        ///    &lt;li&gt; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_TradeGoods {
            get {
                return ResourceManager.GetString("RuleCategory_TradeGoods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A transaction is a way for a player to exchange commodities, trade goods, promissory notes, and relic fragments.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the active player&amp;rsquo;s turn, they may resolve up to one transaction with each of their neighbors.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;A player can resolve a transaction at any time during their turn, even during a combat.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;To resolve a transaction, a player gives any number of trade goods and commodities and up to one promissory note to a neighbor i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Transactions {
            get {
                return ResourceManager.GetString("RuleCategory_Transactions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;When a ship moves, it may transport any combination of fighters and ground forces, but the number of units it transports cannot exceed that ship&amp;rsquo;s capacity value.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The ship can pick up and transport fighters and ground forces when it moves. During a tactical action, it can pick up and transport units from the active system, the system it started its movement in, and each system it moves through.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;These transported units remain with the tr [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Transport {
            get {
                return ResourceManager.GetString("RuleCategory_Transport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A unit is represented by a plastic figure.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;There are three types of units: ships, ground forces, and structures.&lt;/li&gt;
        ///    &lt;li&gt;Each color of plastic comes with the following units:&lt;/li&gt;
        ///    &lt;ul&gt;
        ///        &lt;li&gt;3 Space Docks&lt;/li&gt;
        ///        &lt;li&gt;6 PDS units&lt;/li&gt;
        ///        &lt;li&gt;8 Destroyers&lt;/li&gt;
        ///        &lt;li&gt;8 Cruisers&lt;/li&gt;
        ///        &lt;li&gt;2 War Suns&lt;/li&gt;
        ///        &lt;li&gt;12 Infantry&lt;/li&gt;
        ///        &lt;li&gt;10 Fighters&lt;/li&gt;
        ///        &lt;li&gt;4 Carriers&lt;/li&gt;
        ///        &lt;li&gt;5 Dreadnoughts&lt;/li&gt;
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Units {
            get {
                return ResourceManager.GetString("RuleCategory_Units", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A unit upgrade is a type of technology card.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Unit upgrades share a name with a unit that is printed on a player&amp;rsquo;s faction sheet, but have a higher roman numeral. For example, a player&amp;rsquo;s &amp;ldquo;Carrier I&amp;rdquo; unit is upgraded by the unit upgrade technology &amp;ldquo;Carrier II&amp;rdquo;.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;The Nekro Virus player may upgrade their units with units of the same type (e.g., &amp;ldquo;dreadnought&amp;rdquo; or &amp;ldquo;infantry&amp;rdquo;) even if those unit&amp;rsquo; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_UnitUpgrades {
            get {
                return ResourceManager.GetString("RuleCategory_UnitUpgrades", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The first player to gain 10 victory points wins the game.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players gain victory points in a variety of ways. A common way that a player can gain victory points is by scoring objectives.&lt;/li&gt;
        ///    &lt;li&gt;Each player uses the victory point track to indicate the number of victory points they have gained.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;If the players are using the 14&amp;ndash;space side of the victory point track, the game ends and a player wins when they have 14 victory points instead of 10.&lt; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_VictoryPoints {
            get {
                return ResourceManager.GetString("RuleCategory_VictoryPoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Warfare&lt;/i&gt; strategy card allows a player to remove a command token from the board and redistribute their command tokens between their tactic, fleet, and strategy pools. This card&amp;rsquo;s initiative value is &amp;ldquo;6&amp;rdquo;. During the action phase, if the active player has the &lt;i&gt;Warfare&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/p&gt;
        ///&lt;p&gt;To resolve the primary ability on the &lt;i&gt;Warfare&lt;/i&gt; strategy card, the active player performs the foll [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Warfare {
            get {
                return ResourceManager.GetString("RuleCategory_Warfare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The wormhole nexus is a system tile where several wormholes converge.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The wormhole nexus begins the game in play with its inactive side up.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;The inactive side of the wormhole nexus contains a gamma wormhole. The active side of the wormhole nexus contains an alpha, beta, and gamma wormhole.&lt;/li&gt;
        ///        &lt;li&gt;The wormhole nexus is treated as part of the game board.&lt;/li&gt;
        ///        &lt;li&gt;The wormhole nexus is on the edge of the game board.&lt;/li&gt;
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_WormholeNexus {
            get {
                return ResourceManager.GetString("RuleCategory_WormholeNexus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some systems contain wormholes. Systems that contain identical wormholes are adjacent.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;There are two basic types of wormholes: alpha and beta.&lt;/li&gt;
        ///    &lt;li&gt;If a player has a PDS unit upgrade technology, they can use the &lt;sc&gt;Space Cannon&lt;/sc&gt; abilities of their PDS units through wormholes.&lt;/li&gt;
        ///    &lt;li&gt;Players can be neighbors and perform transactions through wormholes.&lt;/li&gt;
        ///    &lt;li&gt;There are two advanced types of wormhole: delta and gamma. These wormholes follow all  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Wormholes {
            get {
                return ResourceManager.GetString("RuleCategory_Wormholes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Abilities.
        /// </summary>
        public static string RuleCategoryTitle_Abilities {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Abilities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action Cards.
        /// </summary>
        public static string RuleCategoryTitle_ActionCards {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ActionCards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action Phase.
        /// </summary>
        public static string RuleCategoryTitle_ActionPhase {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ActionPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Active Player.
        /// </summary>
        public static string RuleCategoryTitle_ActivePlayer {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ActivePlayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Active System.
        /// </summary>
        public static string RuleCategoryTitle_ActiveSystem {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ActiveSystem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adjacency.
        /// </summary>
        public static string RuleCategoryTitle_Adjacency {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Adjacency", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Agenda Card.
        /// </summary>
        public static string RuleCategoryTitle_AgendaCard {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_AgendaCard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Agenda Phase.
        /// </summary>
        public static string RuleCategoryTitle_AgendaPhase {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_AgendaPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Anomalies.
        /// </summary>
        public static string RuleCategoryTitle_Anomalies {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Anomalies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Anti-Fighter Barrage.
        /// </summary>
        public static string RuleCategoryTitle_AntiFighterBarrage {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_AntiFighterBarrage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asteroid Field.
        /// </summary>
        public static string RuleCategoryTitle_AsteroidField {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_AsteroidField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attach.
        /// </summary>
        public static string RuleCategoryTitle_Attach {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Attach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attacker.
        /// </summary>
        public static string RuleCategoryTitle_Attacker {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Attacker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blockaded.
        /// </summary>
        public static string RuleCategoryTitle_Blockaded {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Blockaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bombardment.
        /// </summary>
        public static string RuleCategoryTitle_Bombardment {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Bombardment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capacity.
        /// </summary>
        public static string RuleCategoryTitle_Capacity {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Capacity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capture.
        /// </summary>
        public static string RuleCategoryTitle_Capture {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Capture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Combat.
        /// </summary>
        public static string RuleCategoryTitle_Combat {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Combat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command Sheet.
        /// </summary>
        public static string RuleCategoryTitle_CommandSheet {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_CommandSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command Tokens.
        /// </summary>
        public static string RuleCategoryTitle_CommandTokens {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_CommandTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commodities.
        /// </summary>
        public static string RuleCategoryTitle_Commodities {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Commodities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Component Action.
        /// </summary>
        public static string RuleCategoryTitle_ComponentAction {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ComponentAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Component Limitations.
        /// </summary>
        public static string RuleCategoryTitle_ComponentLimitations {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ComponentLimitations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Construction.
        /// </summary>
        public static string RuleCategoryTitle_Construction {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Construction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Control.
        /// </summary>
        public static string RuleCategoryTitle_Control {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Control", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cost.
        /// </summary>
        public static string RuleCategoryTitle_Cost {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Cost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custodians Token.
        /// </summary>
        public static string RuleCategoryTitle_CustodiansToken {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_CustodiansToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deals.
        /// </summary>
        public static string RuleCategoryTitle_Deals {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Deals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Defender.
        /// </summary>
        public static string RuleCategoryTitle_Defender {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Defender", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deploy.
        /// </summary>
        public static string RuleCategoryTitle_Deploy {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Deploy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Destroyed.
        /// </summary>
        public static string RuleCategoryTitle_Destroyed {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Destroyed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Diplomacy.
        /// </summary>
        public static string RuleCategoryTitle_Diplomacy {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Diplomacy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elimination.
        /// </summary>
        public static string RuleCategoryTitle_Elimination {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Elimination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exhausted.
        /// </summary>
        public static string RuleCategoryTitle_Exhausted {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Exhausted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exploration.
        /// </summary>
        public static string RuleCategoryTitle_Exploration {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Exploration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fighter Tokens.
        /// </summary>
        public static string RuleCategoryTitle_FighterTokens {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_FighterTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fleet Pool.
        /// </summary>
        public static string RuleCategoryTitle_FleetPool {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_FleetPool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Frontier Tokens.
        /// </summary>
        public static string RuleCategoryTitle_FrontierTokens {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_FrontierTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game Board.
        /// </summary>
        public static string RuleCategoryTitle_GameBoard {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_GameBoard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game Round.
        /// </summary>
        public static string RuleCategoryTitle_GameRound {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_GameRound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gravity Rift.
        /// </summary>
        public static string RuleCategoryTitle_GravityRift {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_GravityRift", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ground Combat.
        /// </summary>
        public static string RuleCategoryTitle_GroundCombat {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_GroundCombat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ground Forces.
        /// </summary>
        public static string RuleCategoryTitle_GroundForces {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_GroundForces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hyperlanes.
        /// </summary>
        public static string RuleCategoryTitle_Hyperlanes {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Hyperlanes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imperial.
        /// </summary>
        public static string RuleCategoryTitle_Imperial {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Imperial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Infantry Tokens.
        /// </summary>
        public static string RuleCategoryTitle_InfantryTokens {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_InfantryTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Influence.
        /// </summary>
        public static string RuleCategoryTitle_Influence {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Influence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initiative Order.
        /// </summary>
        public static string RuleCategoryTitle_InitiativeOrder {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_InitiativeOrder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invasion.
        /// </summary>
        public static string RuleCategoryTitle_Invasion {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Invasion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leaders.
        /// </summary>
        public static string RuleCategoryTitle_Leaders {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Leaders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leader Sheet.
        /// </summary>
        public static string RuleCategoryTitle_LeaderSheet {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_LeaderSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leadership.
        /// </summary>
        public static string RuleCategoryTitle_Leadership {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Leadership", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Legendary Planets.
        /// </summary>
        public static string RuleCategoryTitle_LegendaryPlanets {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_LegendaryPlanets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mecatol Rex.
        /// </summary>
        public static string RuleCategoryTitle_MecatolRex {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_MecatolRex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mechs.
        /// </summary>
        public static string RuleCategoryTitle_Mechs {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Mechs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modifiers.
        /// </summary>
        public static string RuleCategoryTitle_Modifiers {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Modifiers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move.
        /// </summary>
        public static string RuleCategoryTitle_Move {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Move", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Movement.
        /// </summary>
        public static string RuleCategoryTitle_Movement {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Movement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nebula.
        /// </summary>
        public static string RuleCategoryTitle_Nebula {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Nebula", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Neighbors.
        /// </summary>
        public static string RuleCategoryTitle_Neighbors {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Neighbors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Objective Cards.
        /// </summary>
        public static string RuleCategoryTitle_ObjectiveCards {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ObjectiveCards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opponent.
        /// </summary>
        public static string RuleCategoryTitle_Opponent {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Opponent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pds.
        /// </summary>
        public static string RuleCategoryTitle_Pds {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Pds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Planetary Shield.
        /// </summary>
        public static string RuleCategoryTitle_PlanetaryShield {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_PlanetaryShield", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Planets.
        /// </summary>
        public static string RuleCategoryTitle_Planets {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Planets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Politics.
        /// </summary>
        public static string RuleCategoryTitle_Politics {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Politics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Producing Units.
        /// </summary>
        public static string RuleCategoryTitle_ProducingUnits {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ProducingUnits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Production.
        /// </summary>
        public static string RuleCategoryTitle_Production {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Production", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Promissory Notes.
        /// </summary>
        public static string RuleCategoryTitle_PromissoryNotes {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_PromissoryNotes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Purge.
        /// </summary>
        public static string RuleCategoryTitle_Purge {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Purge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Readied.
        /// </summary>
        public static string RuleCategoryTitle_Readied {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Readied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reinforcements.
        /// </summary>
        public static string RuleCategoryTitle_Reinforcements {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Reinforcements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Relics.
        /// </summary>
        public static string RuleCategoryTitle_Relics {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Relics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rerolls.
        /// </summary>
        public static string RuleCategoryTitle_Rerolls {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Rerolls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resources.
        /// </summary>
        public static string RuleCategoryTitle_Resources {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Resources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ships.
        /// </summary>
        public static string RuleCategoryTitle_Ships {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Ships", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Space Cannon.
        /// </summary>
        public static string RuleCategoryTitle_SpaceCannon {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_SpaceCannon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Space Combat.
        /// </summary>
        public static string RuleCategoryTitle_SpaceCombat {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_SpaceCombat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Space Dock.
        /// </summary>
        public static string RuleCategoryTitle_SpaceDock {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_SpaceDock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Speaker.
        /// </summary>
        public static string RuleCategoryTitle_Speaker {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Speaker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status Phase.
        /// </summary>
        public static string RuleCategoryTitle_StatusPhase {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_StatusPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strategic Action.
        /// </summary>
        public static string RuleCategoryTitle_StrategicAction {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_StrategicAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strategy Card.
        /// </summary>
        public static string RuleCategoryTitle_StrategyCard {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_StrategyCard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strategy Phase.
        /// </summary>
        public static string RuleCategoryTitle_StrategyPhase {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_StrategyPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Structures.
        /// </summary>
        public static string RuleCategoryTitle_Structures {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Structures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supernova.
        /// </summary>
        public static string RuleCategoryTitle_Supernova {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Supernova", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sustain Damage.
        /// </summary>
        public static string RuleCategoryTitle_SustainDamage {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_SustainDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System Tiles.
        /// </summary>
        public static string RuleCategoryTitle_SystemTiles {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_SystemTiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tactical Action.
        /// </summary>
        public static string RuleCategoryTitle_TacticalAction {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_TacticalAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Technology.
        /// </summary>
        public static string RuleCategoryTitle_Technology {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Technology", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Technologies.
        /// </summary>
        public static string RuleCategoryTitle_TechnologySystem {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_TechnologySystem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trade.
        /// </summary>
        public static string RuleCategoryTitle_Trade {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Trade", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trade Goods.
        /// </summary>
        public static string RuleCategoryTitle_TradeGoods {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_TradeGoods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transactions.
        /// </summary>
        public static string RuleCategoryTitle_Transactions {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Transactions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transport.
        /// </summary>
        public static string RuleCategoryTitle_Transport {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Transport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Units.
        /// </summary>
        public static string RuleCategoryTitle_Units {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Units", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unit Upgrades.
        /// </summary>
        public static string RuleCategoryTitle_UnitUpgrades {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_UnitUpgrades", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Victory Points.
        /// </summary>
        public static string RuleCategoryTitle_VictoryPoints {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_VictoryPoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warfare.
        /// </summary>
        public static string RuleCategoryTitle_Warfare {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Warfare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wormhole Nexus.
        /// </summary>
        public static string RuleCategoryTitle_WormholeNexus {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_WormholeNexus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wormholes.
        /// </summary>
        public static string RuleCategoryTitle_Wormholes {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Wormholes", resourceCulture);
            }
        }
    }
}
