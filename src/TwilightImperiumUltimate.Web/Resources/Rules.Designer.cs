//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TwilightImperiumUltimate.Web.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Rules {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Rules() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TwilightImperiumUltimate.Web.Resources.Rules", typeof(Rules).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Cards and faction sheets each have abilities that players can resolve to trigger various game effects.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;If information in this Rules Reference contradicts the Learn to Play booklet, the Rules Reference takes precedence.&lt;/li&gt;
        ///    &lt;li&gt;If a card ability contradicts information in the Rules Reference, the card takes precedence. If both the card and the rules can be followed at the same time, they should be.&lt;/li&gt;
        ///    &lt;li&gt;Each ability describes when and how a player can reso [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Abilities {
            get {
                return ResourceManager.GetString("RuleCategory_Abilities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;An ability may be triggered during the timing window it was gained, if applicable. For example, if a player receives the Creuss player&amp;rsquo;s &lt;i&gt;Creuss Iff&lt;/i&gt; promissory note at the start of their turn, they may use it immediately.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Note that some triggers check their conditions when they trigger, while some check their conditions when they would resolve.&lt;/li&gt;
        ///        &lt;li&gt;The Ul player&amp;rsquo;s &lt;sc&gt;Awaken&lt;/sc&gt; ability is an example of an ability that c [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Abilities_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Abilities_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Action cards provide players with various abilities that they can resolve as described on the cards.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each player draws one action card during each status phase.&lt;/li&gt;
        ///    &lt;li&gt;Players can draw action cards by resolving the primary and secondary abilities of the &lt;i&gt;Politics&lt;/i&gt; strategy card.&lt;/li&gt;
        ///    &lt;li&gt;When a player draws an action card, they take the top card from the action card deck and add it to their hand of action cards.&lt;/li&gt;
        ///    &lt;li&gt;Each player&amp;rsquo;s hand ca [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ActionCards {
            get {
                return ResourceManager.GetString("RuleCategory_ActionCards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Players start the game with zero action cards.&lt;/li&gt;
        ///    &lt;li&gt;A player may choose to reveal any or all of the action cards in their hand, if they so choose.&lt;/li&gt;
        ///    &lt;li&gt;If the action card deck is depleted, immediately shuffle the discard pile to form a new action card deck.&lt;/li&gt;
        ///    &lt;li&gt;During the action phase, action cards are dealt out in initiative order.&lt;/li&gt;
        ///    &lt;li&gt;If a player&amp;rsquo;s action card is cancelled, usually via a &lt;i&gt;Sabotage&lt;/i&gt; action card, then if that player [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ActionCards_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_ActionCards_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the action phase, each player takes a turn in initiative order. During a player&amp;rsquo;s turn, they perform a single action. After each player has taken a turn, player turns begin again in initiative order. This process continues until all players have passed.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During a player&amp;rsquo;s turn, they may perform one of the following three types of actions: a strategic action, a tactical action, or a component action.&lt;/li&gt;
        ///    &lt;li&gt;If a player cannot perform an action, t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ActionPhase {
            get {
                return ResourceManager.GetString("RuleCategory_ActionPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Players may still play non&amp;ndash;component action action cards after they have passed.&lt;/li&gt;
        ///    &lt;li&gt;Any abilities that occur at the end of an action happen before any abilities that occur at the end of a player&amp;rsquo;s turn.&lt;/li&gt;
        ///    &lt;li&gt;A player may resolve &amp;ldquo;at the start of your turn&amp;rdquo; and &amp;ldquo;at the end of your turn&amp;rdquo; abilities on the turn that they pass.&lt;/li&gt;
        ///    &lt;li&gt;If all other players have passed, a player will continue to resolve &amp;ldquo;at the start of [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ActionPhase_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_ActionPhase_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The active player is the player taking a turn during the action phase.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, the player who is first in initiative order is the first active player.&lt;/li&gt;
        ///    &lt;li&gt;After the active player takes a turn, the next player in initiative order becomes the active player.&lt;/li&gt;
        ///    &lt;li&gt;After the last player in initiative order takes a turn, the player who is first in initiative order becomes the active player again, and turns begin again in initiative order, i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ActivePlayer {
            get {
                return ResourceManager.GetString("RuleCategory_ActivePlayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;During combat, the active player is the attacker.&lt;/li&gt;
        ///    &lt;li&gt;The active player will have the first opportunity to resolve abilities during each timing window.&lt;/li&gt;
        ///    &lt;li&gt;All transactions during the action phase must involve the active player.&lt;/li&gt;
        ///    &lt;li&gt;If a non&amp;ndash;active player produces hits using the &lt;sc&gt;Space Cannon Offense&lt;/sc&gt; ability of one of their units, those hits must be assigned to the active player&amp;rsquo;s units.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_ActivePlayer_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_ActivePlayer_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The active system is the system that is activated during a tactical action.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When a player performs a tactical action, they activate a system by placing a command token from their tactic pool in that system. That system is the active system.&lt;/li&gt;
        ///    &lt;li&gt;A player &lt;b&gt;cannot&lt;/b&gt; activate a system that already contains one of their command tokens.&lt;/li&gt;
        ///    &lt;li&gt;A player &lt;b&gt;can&lt;/b&gt; activate a system that contains command tokens that match other players&amp;rsquo; factions.&lt;/li&gt; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ActiveSystem {
            get {
                return ResourceManager.GetString("RuleCategory_ActiveSystem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A player may only move into a nebula if it is the active system.&lt;/li&gt;
        ///    &lt;li&gt;No system is the active system during a component or strategic action.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Effects that trigger when a system is activated will not trigger during a component or strategic action.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;After activating a system during a tactical action, play will proceed to the &lt;b&gt;Movement&lt;/b&gt; step.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_ActiveSystem_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_ActiveSystem_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Two system tiles are adjacent to each other if any of the tiles&amp;rsquo; sides are touching each other.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A system that has a wormhole is treated as being adjacent to a system that has a matching wormhole.&lt;/li&gt;
        ///    &lt;li&gt;A unit or planet is adjacent to all system tiles that are adjacent to the system tile that contains that unit or planet.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;A system is not adjacent to itself.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;A planet is treated as being adjacent to the system that contain [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Adjacency {
            get {
                return ResourceManager.GetString("RuleCategory_Adjacency", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A unit is not adjacent to the system it is in.&lt;/li&gt;
        ///    &lt;li&gt;The Wormhole Nexus and the Creuss home system are only adjacent to tiles via wormholes.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Adjacency_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Adjacency_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Agenda cards represent galactic laws and policies. During each agenda phase, players cast votes for specific outcomes on two agenda cards.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;There are two types of agenda cards: laws and directives.&lt;/li&gt;
        ///    &lt;li&gt;Laws can permanently change the rules of the game.&lt;/li&gt;
        ///    &lt;li&gt;When resolving a law, if a &amp;ldquo;For&amp;rdquo; outcome received the most votes, or if the law requires an election, the law&amp;rsquo;s ability becomes a permanent part of the game. Players resolve the ou [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_AgendaCard {
            get {
                return ResourceManager.GetString("RuleCategory_AgendaCard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;When resolving the primary ability of the &lt;i&gt;Politics&lt;/i&gt; card, the active player cannot show the agenda cards they drew to any other player.&lt;/li&gt;
        ///    &lt;li&gt;If the outcome of an agenda affects multiple players, it will do so in speaker order.&lt;/li&gt;
        ///    &lt;li&gt;For notes about specific agenda cards, see the agenda card page.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_AgendaCard_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_AgendaCard_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the agenda phase, players can cast votes on agendas that can change the rules of the game.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players skip the agenda phase during the early portion of each game. After the custodians token is removed from Mecatol Rex, the agenda phase is added to each game round. To resolve the agenda phase, players perform the following steps:&lt;/li&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1 &amp;ndash; First Agenda&lt;/b&gt;: Players resolve the first agenda by following these steps in order:&lt;/li&gt;
        ///    &lt;ol class=&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_AgendaPhase {
            get {
                return ResourceManager.GetString("RuleCategory_AgendaPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A player cannot cast zero votes for an outcome. Casting zero votes is the same as abstaining.&lt;/li&gt;
        ///    &lt;li&gt;When a player casts votes during the agenda phase, it is not that player&amp;rsquo;s turn for the purpose of game effects.&lt;/li&gt;
        ///    &lt;li&gt;If an agenda outcome affects multiple players, it does so in speaker order.&lt;/li&gt;
        ///    &lt;li&gt;Riders are resolved after the agenda is fully resolved, in speaker order.&lt;/li&gt;
        ///    &lt;li&gt;If a player successfully predicts multiple riders, they resolve on [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_AgendaPhase_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_AgendaPhase_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;An anomaly is a system tile that has unique rules.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;An anomaly is identified by a red border located on the tile&amp;rsquo;s corners.&lt;/li&gt;
        ///    &lt;li&gt;There are four types of anomalies: asteroid fields, nebulae, supernovas, and gravity rifts.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Some anomalies contain planets; those systems are still anomalies.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;Each type of anomaly is identified by its art. See rulebook for images.&lt;/li&gt;
        ///    &lt;li&gt;Abilities can cause a system tile to become an an [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Anomalies {
            get {
                return ResourceManager.GetString("RuleCategory_Anomalies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;An empty system is not an anomaly.&lt;/li&gt;
        ///    &lt;li&gt;A system containing a wormhole is not an anomaly.&lt;/li&gt;
        ///    &lt;li&gt;A system with a Vuil&amp;rsquo;raith Dimensional Tear is a gravity rift, and thus an anomaly.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Anomalies_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Anomalies_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A unit with the &lt;sc&gt;Anti&amp;ndash;Fighter Barrage&lt;/sc&gt; ability may be able to destroy an opponent&amp;rsquo;s fighters at the onset of a space battle. During the &lt;b&gt;Anti&amp;ndash;Fighter Barrage&lt;/b&gt; step of the first round of space combat, players perform the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1&lt;/b&gt;: Each player rolls dice for each of their units in the combat that has the &lt;sc&gt;Anti&amp;ndash;Fighter Barrage&lt;/sc&gt; ability; this is called an anti&amp;ndash;fighter barrage roll. A hit is produced for  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_AntiFighterBarrage {
            get {
                return ResourceManager.GetString("RuleCategory_AntiFighterBarrage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Game effects that reroll, modify, or otherwise affect dice rolls during combat may affect anti&amp;ndash;fighter barrage rolls. This is distinct from, and a superset of, both anti&amp;ndash;fighter barrage rolls and combat rolls.&lt;/li&gt;
        ///    &lt;li&gt;A non&amp;ndash;fighter ship cannot its &lt;sc&gt;Sustain Damage&lt;/sc&gt; ability to cancel a hit produced by an anti&amp;ndash;fighter barrage roll.&lt;/li&gt;
        ///    &lt;li&gt;Effects such as the &lt;i&gt;Shields Holding&lt;/i&gt; action card, which trigger on hits produced during space com [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_AntiFighterBarrage_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_AntiFighterBarrage_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;An asteroid field is an anomaly that affects movement.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A ship cannot move through or into an asteroid field.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_AsteroidField {
            get {
                return ResourceManager.GetString("RuleCategory_AsteroidField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A player with the &lt;i&gt;Antimass Deflectors&lt;/i&gt; technology may move their ships through asteroid fields.&lt;/li&gt;
        ///    &lt;li&gt;A future rule change will place the ship movement restrictions of anomalies upon all units.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_AsteroidField_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_AsteroidField_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some game effects instruct a player to attach a card to a planet card. The attached card modifies that planet card in some way.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;To attach a card to a planet card, a player places the card with the attach effect partially underneath the planet card.&lt;/li&gt;
        ///    &lt;li&gt;If a player gains or loses control of planet that contains a card with an attach effect, the attached card stays with that planet.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;The attached card maintains its exhausted or readied [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Attach {
            get {
                return ResourceManager.GetString("RuleCategory_Attach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;There is no limit on how many attachments a single planet may have.&lt;/li&gt;
        ///    &lt;li&gt;The Custodians Token is not an attachment.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Attach_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Attach_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During combat, the active player is the attacker.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Attacker {
            get {
                return ResourceManager.GetString("RuleCategory_Attacker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;The attacker&amp;rsquo;s opponent is the defender.&lt;/li&gt;
        ///    &lt;li&gt;The attacker will have the first opportunity to resolve abilities during each timing window.&lt;/li&gt;
        ///    &lt;li&gt;When the Mahact player resolves their &lt;i&gt;Benediction&lt;/i&gt; hero ability, the player than had their ships moved will be the attacker.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Resolving abilities will be by initiative order, starting with the Mahact player. As such, the defender may resolve abilities before the attacker, depending on what ord [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Attacker_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Attacker_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A player&amp;rsquo;s unit with &lt;sc&gt;Production&lt;/sc&gt; is blockaded if it is in a system that does not contain any of their ships and contains other players&amp;rsquo; ships.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A player cannot use a blockaded unit to produce ships; that player can still use a blockaded unit to produce ground forces.&lt;/li&gt;
        ///    &lt;li&gt;When a player blockades another player&amp;rsquo;s space dock, if the blockaded player has captured any of the blockading player&amp;rsquo;s units, those units are returned to the b [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Blockaded {
            get {
                return ResourceManager.GetString("RuleCategory_Blockaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;While a player is involved in a space combat in a system, their units in that system are not blockaded, as both players will have ships in the system. Consequently, they may capture their opponent&amp;rsquo;s units.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;If that player has a unit in another system that their opponent is blockading, they will be unable to capture their opponent&amp;rsquo;s units.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;If, at the end of a combat, one player has no ships, but a space dock in the system, and the oth [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Blockaded_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Blockaded_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A unit with the &lt;sc&gt;Bombardment&lt;/sc&gt; ability may be able to destroy another player&amp;rsquo;s ground forces during an invasion. During the &lt;b&gt;Bombardment&lt;/b&gt; step, players perform the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1&lt;/b&gt; &amp;ndash; The active player chooses which planet each of their units that has a &lt;sc&gt;Bombardment&lt;/sc&gt; ability will bombard. Then, that player rolls dice for each of those units; this is called a bombardment roll. A hit is produced for each die roll that is equal to [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Bombardment {
            get {
                return ResourceManager.GetString("RuleCategory_Bombardment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;The &lt;b&gt;Bombardment&lt;/b&gt; step happens outside of combat. No combat effects may affect a bombardment roll.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;A player cannot score a secret objective that requires them to win a combat or similar by destroying units during the &lt;b&gt;Bombardment&lt;/b&gt; step.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;Mechs may use their &lt;sc&gt;Sustain Damage&lt;/sc&gt; ability to cancel a hit produced by a bombardment roll.&lt;/li&gt;
        ///    &lt;li&gt;Only the active player may bombard. Usually, but not always, only the active player wil [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Bombardment_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Bombardment_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Capacity is an attribute of some units that is presented on faction sheets and unit upgrade technology cards.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A unit&amp;rsquo;s capacity value indicates the maximum combined number of fighters and ground forces that it can transport.&lt;/li&gt;
        ///    &lt;li&gt;The combined capacity values of a player&amp;rsquo;s ships in a system determine the number of fighters and ground forces that player can have in that system&amp;rsquo;s space area.&lt;/li&gt;
        ///    &lt;li&gt;If a player has more fighters and ground  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Capacity {
            get {
                return ResourceManager.GetString("RuleCategory_Capacity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If a player moves more fighters and/or ground forces into a system containing another player&amp;rsquo;s ships, capacity limits must be met before proceeding to the &lt;b&gt;Space Cannon Offense&lt;/b&gt; substep or the &lt;b&gt;Space Combat&lt;/b&gt; step.&lt;/li&gt;
        ///    &lt;li&gt;If a ship with capacity is destroyed during the &lt;b&gt;Space Cannon Offense&lt;/b&gt; step, capacity limits must be met before space combat starts.&lt;/li&gt;
        ///    &lt;li&gt;Capacity is checked after the winner of a space combat is determined. As such, it is poss [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Capacity_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Capacity_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some abilities instruct a player to capture a unit, preventing the unit&amp;rsquo;s original owner from using it.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;If a player captures a non&amp;ndash;fighter ship or mech, they place it on their faction sheet. When such a unit is returned, it is placed into the reinforcements of the original owner.&lt;/li&gt;
        ///    &lt;li&gt;A captured non&amp;ndash;fighter ship or mech is returned under the following circumstances:&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;If the player who captured the unit agrees to retu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Capture {
            get {
                return ResourceManager.GetString("RuleCategory_Capture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;For more information, see the uil&amp;rsquo;raith faction notes page.&lt;/li&gt;
        ///	&lt;li&gt;Units are returned as soon as a space dock is blockaded. If this occurs at the end of the &lt;b&gt;Space Combat&lt;/b&gt; step of a tactical action, the units will be returned before the &lt;b&gt;Invasion&lt;/b&gt; step, in which the space dock could potentially be destroyed.&lt;/li&gt;
        ///    &lt;li&gt;A captured unit may only be returned to the player that originally owned it, and not to another player.&lt;/li&gt;
        ///    &lt;li&gt;The Nekro player and th [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Capture_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Capture_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Combat is an attribute of some units that is presented on faction sheets and unit upgrade technology cards.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During combat, if a unit&amp;rsquo;s combat roll produces a result equal to or greater than its combat value, it produces a hit.&lt;/li&gt;
        ///    &lt;li&gt;If a unit&amp;rsquo;s combat value contains two or more burst icons, instead of rolling a single die, the player rolls one die for each burst icon when making that unit&amp;rsquo;s combat rolls.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Combat {
            get {
                return ResourceManager.GetString("RuleCategory_Combat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;The &amp;ldquo;0&amp;rdquo; side of the d10 represents a result of 10.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Combat_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Combat_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Each player has a command sheet that contains a strategy pool, a tactic pool, a fleet pool, a trade good area, and a quick reference.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The pools on the command sheet are where players place their command tokens. Command tokens in a player&amp;rsquo;s pools are used by that player to perform strategic and tactical actions and to increase the number of ships that player can have in each system.&lt;/li&gt;
        ///    &lt;li&gt;The trade good area on the command sheet is where a player places the [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_CommandSheet {
            get {
                return ResourceManager.GetString("RuleCategory_CommandSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;When a command token is gained, it may be placed in any of the three pools.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_CommandSheet_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_CommandSheet_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Command tokens are a currency that players use to perform actions and expand their fleets.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each player begins the game with eight tokens on their command sheet: three in their tactic pool, three in their fleet pool, and two in their strategy pool.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Command tokens in the strategy and tactic pool are placed with the faction symbol faceup.&lt;/li&gt;
        ///        &lt;li&gt;Command tokens in the fleet pool are placed with the ship silhouette faceup.&lt;/li&gt;
        ///    &lt;/o [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_CommandTokens {
            get {
                return ResourceManager.GetString("RuleCategory_CommandTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_CommandTokens_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_CommandTokens_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Commodities represent goods that are plentiful for their own faction and are desired by other factions. A commodity has no inherent game effects, but converts into a trade good if given to or received from another player.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Commodities and trade goods are represented by opposite sides of the same token.&lt;/li&gt;
        ///    &lt;li&gt;The commodity value on a player&amp;rsquo;s faction sheet indicates the maximum number of commodities that player can have.&lt;/li&gt;
        ///    &lt;li&gt;When an effect instruct [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Commodities {
            get {
                return ResourceManager.GetString("RuleCategory_Commodities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A player starts the game with zero commodities.&lt;/li&gt;
        ///    &lt;li&gt;If a player has their maximum number of commodities, and is instructed to replenish their commodities, they will take no commodities. However, they will still trigger any &amp;ldquo;when [this] player replenishes commodities&amp;rdquo; effects, most notably the &lt;i&gt;Trade Agreement&lt;/i&gt; promissory note.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Commodities_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Commodities_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A component action is a type of action that a player can perform during their turn of an action phase.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Component actions can be found on various game components, including action cards, technology cards, leaders, exploration cards, relics, promissory notes, and faction sheets. Each component action is indicated by an &amp;ldquo;Action&amp;rdquo; header.&lt;/li&gt;
        ///    &lt;li&gt;To perform a component action, a player reads the action&amp;rsquo;s text and follows the instructions as described. [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ComponentAction {
            get {
                return ResourceManager.GetString("RuleCategory_ComponentAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Action cards without the &amp;ldquo;Action&amp;rdquo; header are not used to perform component actions.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_ComponentAction_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_ComponentAction_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;If a component type is depleted during the game, players obey the following rules:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Dice: Dice are limitless. If a player needs to roll more dice than the game provides, that player should roll as many as possible, record the results, and then reroll dice as necessary.&lt;/li&gt;
        ///    &lt;li&gt;Tokens: Tokens are limited to those included in the game, except for the following:&lt;/li&gt;
        ///    &lt;ul&gt;
        ///        &lt;li&gt;Control Tokens&lt;/li&gt;
        ///        &lt;li&gt;Fighter Tokens&lt;/li&gt;
        ///        &lt;li&gt;Trade Good To [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ComponentLimitations {
            get {
                return ResourceManager.GetString("RuleCategory_ComponentLimitations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;As each player only has ten plastic fighter figures and twelve plastic infantry figures, a player cannot have fighters in more than ten systems, and cannot have infantry on more than twelve planets or being carried in more than twelve space areas, or any combination thereof.&lt;/li&gt;
        ///    &lt;li&gt;Players may also swap infantry and fighter plastic pieces for tokens at any time.&lt;/li&gt;
        ///    &lt;li&gt;Players may swap between three value tokens and one value tokens as desired.&lt;/li&gt;
        ///    &lt;li&gt;A player [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ComponentLimitations_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_ComponentLimitations_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Construction&lt;/i&gt; strategy card allows players to construct structures on planets they control. This card&amp;rsquo;s initiative value is &amp;ldquo;4&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Construction&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/li&gt;
        ///    &lt;li&gt;To resolve the primary ability on the &lt;i&gt;Construction&lt;/i&gt; strategy card, the active player may place either one PDS or one space doc [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Construction {
            get {
                return ResourceManager.GetString("RuleCategory_Construction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A player may have a maximum of one space dock on each planet.&lt;/li&gt;
        ///    &lt;li&gt;A player may have a maximum of two PDS units on each planet.&lt;/li&gt;
        ///    &lt;li&gt;Structures cannot be placed on the planet with the &lt;i&gt;Demilitarized Zone&lt;/i&gt; exploration card attached.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Construction_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Construction_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Each player begins the game with control of each planet in their home system. During the game, players can gain control of additional planets.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When a player gains control of a planet, they take the planet card that corresponds to that planet and place it in their play area; that card is exhausted.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;If a player is the first player to control a planet, they take the planet card from the planet card deck.&lt;/li&gt;
        ///        &lt;li&gt;If another player contr [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Control {
            get {
                return ResourceManager.GetString("RuleCategory_Control", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Control tokens are not component limited; a player may control an unlimited number of planets.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Control_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Control_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Cost is an attribute of some units that is presented on faction sheets and unit upgrade technology cards. A unit&amp;rsquo;s cost determines the number of resources a player must spend to produce that unit.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;To produce a unit, a player must spend a number of resources equal to or greater than the cost of the unit they are producing.&lt;/li&gt;
        ///    &lt;li&gt;If the cost is accompanied by two icons &amp;ndash; typically for fighters and ground forces &amp;ndash; a player produces two of that uni [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Cost {
            get {
                return ResourceManager.GetString("RuleCategory_Cost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Whenever a unit is produced, its cost must be paid, unless the effect that is producing the unit explicitly says otherwise.&lt;/li&gt;
        ///    &lt;li&gt;A player does not have to pay a unit&amp;rsquo;s cost to resolve that unit&amp;rsquo;s deploy ability. However, the deploy ability itself may have a cost that must be paid.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Cost_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Cost_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;The custodians token is not an attachment.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_CustiodiansToken_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_CustiodiansToken_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The custodians token begins each game on Mecatol Rex. The token represents the caretakers that safeguard the seat of the empire until such time as the galactic council can be reconvened.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Units can move into the system that contains Mecatol Rex following normal rules; however, players cannot commit ground forces to land on Mecatol Rex until the custodians token is removed from the planet.&lt;/li&gt;
        ///    &lt;li&gt;Before the &lt;b&gt;Commit Ground Forces&lt;/b&gt; step of an invasion, the activ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_CustodiansToken {
            get {
                return ResourceManager.GetString("RuleCategory_CustodiansToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A deal is an agreement between two players that may or may not include a transaction that involves physical components.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players can make deals with each other at any time, even if they are not neighbors. However, deals that include a transaction must follow the rules for transactions, including that the players be neighbors.&lt;/li&gt;
        ///    &lt;li&gt;Deals are binding or non&amp;ndash;binding according to the conditions of the deal.&lt;/li&gt;
        ///    &lt;li&gt;If the terms of a deal can be resolved  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Deals {
            get {
                return ResourceManager.GetString("RuleCategory_Deals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;In general, only the terms of the deal that a player can immediately perform, even without the deal taking place, are binding. For example:&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;If a player has four resources available during the &lt;b&gt;Production&lt;/b&gt; step of a tactical action, another player may give them four trade goods to on the condition that they produce a dreadnought during this &lt;b&gt;Production&lt;/b&gt; step. As the active player could produce a dreadnought with the resources, this deal is bind [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Deals_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Deals_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During either a space or ground combat, the player who is not the active player is the defender.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Defender {
            get {
                return ResourceManager.GetString("RuleCategory_Defender", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;When the Mahact player resolves their &lt;i&gt;Benediction&lt;/i&gt; hero ability, the player than had their ships already in the system will be the defender.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Resolving abilities will be by initiative order, starting with the Mahact player. As such, the defender may resolve abilities before the attacker, depending on what order those two players are in.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Defender_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Defender_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some units have deploy abilities. Deploy abilities are indicated by the &lt;sc&gt;Deploy&lt;/sc&gt; header and provide the means to place specific units on the game board without producing them as normal.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A player can use a unit&amp;rsquo;s &lt;sc&gt;Deploy&lt;/sc&gt; ability when the ability&amp;rsquo;s conditions are met to place that unit on the game board.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;A player does not have to spend resources to deploy a unit unless otherwise specified.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;A player can only r [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Deploy {
            get {
                return ResourceManager.GetString("RuleCategory_Deploy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Deploy_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Deploy_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Various game effects can cause a unit to be destroyed. When a player&amp;rsquo;s unit is destroyed, it is removed from the game board and returned to their reinforcements.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When a player assigns hits that were produced against their units, that player chooses a number of their units to be destroyed equal to the number of hits produced against those units.&lt;/li&gt;
        ///    &lt;li&gt;If a player&amp;rsquo;s unit is removed from the board by a game effect, it is not treated as being destroyed;  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Destroyed {
            get {
                return ResourceManager.GetString("RuleCategory_Destroyed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Destroyed_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Destroyed_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Diplomacy&lt;/i&gt; strategy card can be used to preemptively prevent other players from activating a specific system. It can also be used to ready planets. This card&amp;rsquo;s initiative value is &amp;ldquo;2&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Diplomacy&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/li&gt;
        ///    &lt;li&gt;To resolve the primary ability on the &lt;i&gt;Diplomacy&lt;/i&gt; strategy card, the activ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Diplomacy {
            get {
                return ResourceManager.GetString("RuleCategory_Diplomacy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Diplomacy_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Diplomacy_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A player who is eliminated is no longer part of the game.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A player is eliminated when they meet &lt;b&gt;all&lt;/b&gt; of the following three conditions:&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;The player has no ground forces on the game board.&lt;/li&gt;
        ///        &lt;li&gt;The player has no unit that has &lt;sc&gt;Production&lt;/sc&gt;.&lt;/li&gt;
        ///        &lt;li&gt;The player does not control any planets.&lt;/li&gt;
        ///    &lt;/ol&gt;
        ///    &lt;li&gt;When a player becomes eliminated, all of the units, command tokens, control tokens, promissory not [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Elimination {
            get {
                return ResourceManager.GetString("RuleCategory_Elimination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;While the Arborec flagship may produce units, it does not have the &lt;sc&gt;Production&lt;/sc&gt; ability. Having it on the game board will not prevent the Arborec player from being eliminated. This applies to all similar effects in the game.&lt;/li&gt;
        ///    &lt;li&gt;An eliminated player&amp;rsquo;s home system remains a home system for game effects.&lt;/li&gt;
        ///        &lt;ol&gt;&lt;li&gt;This includes effects that specify &amp;ldquo;another player&amp;rsquo;s home system&amp;rdquo;.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;If an eliminated player had any  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Elimination_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Elimination_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some cards can be exhausted. A player cannot resolve abilities or spend the resources or influence of an exhausted card.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;To exhaust a card, a player flips the card facedown.&lt;/li&gt;
        ///    &lt;li&gt;During the &lt;b&gt;Ready Cards&lt;/b&gt; step of the status phase, each player readies all of their exhausted cards by flipping those cards faceup.&lt;/li&gt;
        ///    &lt;li&gt;A player exhausts their planet cards to spend either the resources or influence on that card.&lt;/li&gt;
        ///    &lt;li&gt;Abilities, including some f [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Exhausted {
            get {
                return ResourceManager.GetString("RuleCategory_Exhausted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Planets will also ready at the end of each agenda phase. Leaders, relics and technology will not.&lt;/li&gt;
        ///    &lt;li&gt;If a game effect instructs a player to exhaust a planet, the exhausted planet must be controlled by that player, unless the game effect specifies otherwise.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Exhausted_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Exhausted_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Planets and some space areas can be explored, yielding varying results determined by the cards drawn from the exploration decks.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When a player takes control of a planet that is not already controlled by another player, they explore that planet.&lt;/li&gt;
        ///    &lt;li&gt;When a player explores a planet, they draw and resolve a card from the exploration deck that corresponds to that planet&amp;rsquo;s trait.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;There are three planetary exploration decks, each of [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Exploration {
            get {
                return ResourceManager.GetString("RuleCategory_Exploration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;An exploration cards that purges itself is not discarded into its respective discard pile.&lt;/li&gt;
        ///    &lt;li&gt;&lt;i&gt;Enigmatic Device&lt;/i&gt; and &lt;i&gt;Ion Storm&lt;/i&gt; are placed into play, not into the frontier discard pile.&lt;/li&gt;
        ///    &lt;li&gt;If a player is to gain multiple planets in a system, they choose the order in which they gain them, and explore each planet as they gain it before gaining the next.&lt;/li&gt;
        ///    &lt;li&gt;A player may perform transactions after revealing an exploration card and before res [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Exploration_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Exploration_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A fighter token functions as a plastic fighter unit for all game purposes.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When producing a fighter unit, a player can use a fighter token from the supply instead of a plastic piece.&lt;/li&gt;
        ///    &lt;li&gt;Players can replace their plastic fighters with tokens at any time.&lt;/li&gt;
        ///    &lt;li&gt;If a player ever has a fighter token in a system that does not contain one of their plastic fighters, that player must replace it with a plastic fighter from their reinforcements.&lt;/li&gt;
        ///    &lt;ol&gt;&lt; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_FighterTokens {
            get {
                return ResourceManager.GetString("RuleCategory_FighterTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;As each player only has ten plastic fighter figures, a player cannot have fighters in more than ten systems.&lt;/li&gt;
        ///    &lt;li&gt;Players may also swap fighter tokens for plastic pieces at any time.&lt;/li&gt;
        ///    &lt;li&gt;Fighter tokens are not component limited.&lt;/li&gt;
        ///    &lt;li&gt;A future rule change will have any unaccompanied fighter tokens removed, instead of destroyed.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_FighterTokens_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_FighterTokens_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The fleet pool is an area of a player&amp;rsquo;s command sheet.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The number of command tokens in a player&amp;rsquo;s fleet pool indicates the maximum number of non&amp;ndash;fighter ships that a player can have in a system.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Units that are on planets or that count against a player&amp;rsquo;s capacity do not count against that player&amp;rsquo;s fleet pool.&lt;/li&gt;
        ///        &lt;li&gt;Units that are being transported through systems do not count against a player&amp;rsquo;s f [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_FleetPool {
            get {
                return ResourceManager.GetString("RuleCategory_FleetPool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Fighters and ground forces do not count towards capacity during combat. As such, any number of Fighter II may be in a system during combat, regardless of capacity and fleet pool. This will usually only be caused by effects that place units in a system during combat. When combat ends, however units will need to be removed to meet capacity and fleet pool requirements.&lt;/li&gt;
        ///    &lt;li&gt;Ships may be moved into, produced in or placed in a system even if doing so would exceed the fleet poo [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_FleetPool_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_FleetPool_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Frontier tokens can be explored for a variety of game effects.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Frontier tokens are placed on the game board during setup. One frontier token is placed in each system that does not contain any planets.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Frontier tokens are not placed on hyperlane tiles.&lt;/li&gt;
        ///        &lt;li&gt;A system cannot have more than one frontier token.&lt;/li&gt;
        ///        &lt;li&gt;Frontier tokens are placed in anomalies that do not have planets.&lt;/li&gt;
        ///        &lt;li&gt;A frontier token is pla [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_FrontierTokens {
            get {
                return ResourceManager.GetString("RuleCategory_FrontierTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Players may explore space areas that contain frontier tokens if they own the &lt;i&gt;Dark Energy Tap&lt;/i&gt; technology or if another game effect allows them to.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_FrontierTokens_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_FrontierTokens_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The game board consists of all system tiles in play.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The game board consists of all system tiles that were placed during setup, even if the sides of those tiles do not touch any other system tiles, such as the Ghosts of Creuss&amp;rsquo; home system.&lt;/li&gt;
        ///    &lt;li&gt;A system tile is on the edge of the game board if any of its sides are not touching another system tile.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;The Ghosts of Creuss home system and the wormhole nexus are on the edge of the game board. [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_GameBoard {
            get {
                return ResourceManager.GetString("RuleCategory_GameBoard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If the edge of a system tile is touching a hyperlane tile, that edge does not cause that system tile to be on the edge of the game board.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;When using the five&amp;ndash; and seven&amp;ndash;player hyperlane setups, the system tile in the center of the ring of hyperlanes is not on the edge of the game board.&lt;/li&gt;
        ///        &lt;li&gt;When using the seven&amp;ndash; and eight&amp;ndash;player alternate setups, only the system tiles designated as &amp;ldquo;Ring 3&amp;rdquo; and home syst [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_GameBoard_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_GameBoard_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A game round consists of the following four phases:
        ///&lt;ol&gt;
        ///    &lt;li&gt;Strategy Phase&lt;/li&gt;
        ///    &lt;li&gt;Action Phase&lt;/li&gt;
        ///    &lt;li&gt;Status Phase&lt;/li&gt;
        ///    &lt;li&gt;Agenda Phase&lt;/li&gt;
        ///&lt;/ol&gt;&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players skip the agenda phase during the early portion of each game. After the custodians token is removed from Mecatol Rex, the agenda phase is added to each game round.&lt;/li&gt;
        ///    &lt;li&gt;Player turns occur during the action phase.&lt;/li&gt;
        ///    &lt;li&gt;Abilities that last until the end of a player&amp;rsquo;s tu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_GameRound {
            get {
                return ResourceManager.GetString("RuleCategory_GameRound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;During the strategy, status and agenda phases, players to not take turns for the purpose of game effects.&lt;/li&gt;
        ///    &lt;li&gt;A game has a maximum of nine game rounds.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_GameRound_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_GameRound_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A gravity rift is an anomaly that affects movement.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A ship that will move out of or through a gravity rift at any time during its movement, applies +1 to its move value.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;This can allow a ship to reach the active system from farther away than it normally could.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;For each ship that would move out of or through a gravity rift, one die is rolled immediately before it exits the gravity rift system; on a result of 1&amp;ndash;3, that ship is re [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_GravityRift {
            get {
                return ResourceManager.GetString("RuleCategory_GravityRift", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Moving into a gravity rift will not provide the +1, nor will the ships have to roll for removal.&lt;/li&gt;
        ///    &lt;li&gt;A ship removed by a gravity rift is not destroyed.&lt;/li&gt;
        ///    &lt;li&gt;All ship movement must be declared before any roll for gravity rift removal. A player may not move additional ships after seeing the result of this roll.&lt;/li&gt;
        ///    &lt;li&gt;A ship that is removed by a gravity rift will not count toward the fleet limit in the destination system.&lt;/li&gt;
        ///    &lt;li&gt;Retreating from a gra [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_GravityRift_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_GravityRift_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the &lt;b&gt;Ground Combat&lt;/b&gt; step of an invasion, if the active player has ground forces on a planet that contains another player&amp;rsquo;s ground forces, those players resolve a ground combat on that planet. To resolve a ground combat, players perform the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1 &amp;ndash; Roll Dice&lt;/b&gt;: Each player rolls one die for each ground force they have on the planet; this is a combat roll. If a unit&amp;rsquo;s combat roll produces a result that is equal to or gr [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_GroundCombat {
            get {
                return ResourceManager.GetString("RuleCategory_GroundCombat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;The &amp;ldquo;start of combat&amp;rdquo; and &amp;ldquo;start of combat round&amp;rdquo; occurs before the &lt;b&gt;Roll Dice&lt;/b&gt; step.&lt;/li&gt;
        ///    &lt;li&gt;The &amp;ldquo;end of combat&amp;rdquo; and &amp;ldquo;end of combat round&amp;rdquo; occurs after the &lt;b&gt;Assign Hits&lt;/b&gt; step.&lt;/li&gt;
        ///    &lt;li&gt;If ground combat is to happen on multiple planets during a single invasion step, they will be resolved planet by planet, after the &lt;b&gt;Space Cannon Defense&lt;/b&gt; step has resolved been resolved on all planets and before the &lt;b&gt;Establ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_GroundCombat_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_GroundCombat_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A ground force is a type of unit. All infantry and mech units in the game are ground forces. Some races have unique infantry units.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Ground forces are always on planets, in a space area with ships that have capacity values, or being transported by those ships.&lt;/li&gt;
        ///    &lt;li&gt;Ground forces being transported by a ship are placed in a system&amp;rsquo;s space area along with the ship that is transporting them.&lt;/li&gt;
        ///    &lt;li&gt;There is no limit to the number of ground forces a play [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_GroundForces {
            get {
                return ResourceManager.GetString("RuleCategory_GroundForces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_GroundForces_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_GroundForces_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Hyperlanes are tiles that are used in some game board setups to create adjacency of system tiles that are not touching each other.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Systems that are connected by lines drawn across one or more hyperlane tiles are adjacent for all purposes.&lt;/li&gt;
        ///    &lt;li&gt;Hyperlane tiles are not systems. They cannot have units on them and they cannot be targets for effects or abilities.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Hyperlanes {
            get {
                return ResourceManager.GetString("RuleCategory_Hyperlanes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If the edge of a system time is touching a hyperlane tile, that edge does not cause that system tile to be on the edge of the game board.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;When using the five&amp;ndash; and seven&amp;ndash;player hyperlane setups, the system tile in the center of the ring of hyperlanes is not on the edge of the game board.&lt;/li&gt;
        ///        &lt;li&gt;When using the seven&amp;ndash; and eight&amp;ndash;player alternate setups, only the system tiles designated as &amp;ldquo;Ring 3&amp;rdquo; and home syst [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Hyperlanes_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Hyperlanes_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Imperial&lt;/i&gt; strategy card allows players to score victory points and draw secret objectives. This card&amp;rsquo;s initiative value is &amp;ldquo;8&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Imperial&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/li&gt;
        ///    &lt;li&gt;To resolve the primary ability on the &lt;i&gt;Imperial&lt;/i&gt; strategy card, the active player can score one public objective of their choice if  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Imperial {
            get {
                return ResourceManager.GetString("RuleCategory_Imperial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A player must control every planet in their home system to score a public objective using the first primary ability of &lt;i&gt;Imperial&lt;/i&gt;.&lt;/li&gt;
        ///    &lt;li&gt;A player who controls Mecatol Rex does not need to control every planet in their home system to gain a victory point from the second primary ability of &lt;i&gt;Imperial&lt;/i&gt;.&lt;/li&gt;
        ///    &lt;li&gt;A player who controls Mecatol Rex while resolving the primary ability of &lt;i&gt;Imperial&lt;/i&gt; must gain a victory point; they cannot instead draw a secret ob [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Imperial_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Imperial_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;An infantry token functions as a plastic infantry unit for all game purposes.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When producing an infantry unit, a player can use an infantry token from the supply instead of a plastic piece.&lt;/li&gt;
        ///    &lt;li&gt;Players can replace their plastic infantry with tokens at any time.&lt;/li&gt;
        ///    &lt;li&gt;If a player ever has an infantry token on a planet that does not contain one of their plastic infantry or in the space area of a system that does not contain one of their plastic infantry, [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_InfantryTokens {
            get {
                return ResourceManager.GetString("RuleCategory_InfantryTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;As each player only has twelve plastic infantry figures, a player cannot have infantry on more than twelve planets or being transported in more than twelve space areas, or any combination thereof.&lt;/li&gt;
        ///    &lt;li&gt;Players may also swap infantry tokens for plastic pieces at any time.&lt;/li&gt;
        ///    &lt;li&gt;Infantry tokens are not component limited.&lt;/li&gt;
        ///    &lt;li&gt;A player may remove a plastic infantry figure from a planet or space area, along with any accompanying infantry tokens, if doing so a [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_InfantryTokens_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_InfantryTokens_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Influence represents a planet&amp;rsquo;s political power. Players spend influence to gain command tokens using the &lt;i&gt;Leadership&lt;/i&gt; strategy card, and the influence values of planets are used to cast votes during the agenda phase.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A planet&amp;rsquo;s influence is the rightmost value (surrounded by a blue border) found on the planet&amp;rsquo;s system tile and planet card.&lt;/li&gt;
        ///    &lt;li&gt;A player can spend a planet&amp;rsquo;s influence by exhausting that planet&amp;rsquo;s card.&lt;/li&gt;
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Influence {
            get {
                return ResourceManager.GetString("RuleCategory_Influence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Influence_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Influence_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Initiative order is the order in which players resolve steps of the action and status phases.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Initiative order is determined by the initiative numbers on strategy cards.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;A player who has the Naalu &amp;ldquo;0&amp;rdquo; token has the initiative number &amp;ldquo;0&amp;rdquo;.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;Initiative order begins with the player who has the lowest&amp;ndash;numbered strategy card and proceeds to the player who has the strategy card that is next in numerical order.&lt;/ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_InitiativeOrder {
            get {
                return ResourceManager.GetString("RuleCategory_InitiativeOrder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If there are multiple abilities that players wish to resolve at the same time during the action phase, initiative order will determine the order they are resolved in. See faction page for more details.&lt;/li&gt;
        ///    &lt;li&gt;The initiative order of all strategy cards is:&lt;/li&gt;
        ///    &lt;ol class=&quot;roman&quot;&gt;
        ///        &lt;li&gt;Leadership&lt;/li&gt;
        ///        &lt;li&gt;Diplomacy&lt;/li&gt;
        ///        &lt;li&gt;Politics&lt;/li&gt;
        ///        &lt;li&gt;Construction&lt;/li&gt;
        ///        &lt;li&gt;Trade&lt;/li&gt;
        ///        &lt;li&gt;Warfare&lt;/li&gt;
        ///        &lt;li&gt;Technology&lt;/li&gt; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_InitiativeOrder_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_InitiativeOrder_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Invasion is a step of the tactical action during which the active player can land ground forces on planets to gain control of those planets.&lt;/p&gt;
        ///&lt;p&gt;To resolve an invasion, players perform the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1 &amp;ndash; Bombardment&lt;/b&gt;: The active player may use the &lt;sc&gt;Bombardment&lt;/sc&gt; ability of any of their units in the active system.&lt;/li&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 2 &amp;ndash; Commit Ground Forces&lt;/b&gt;: If the active player has ground forces in the space area of the acti [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Invasion {
            get {
                return ResourceManager.GetString("RuleCategory_Invasion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Units are considered to be on the planet for game effects from the &lt;b&gt;Commit Ground Forces&lt;/b&gt; step onward.&lt;/li&gt;
        ///    &lt;li&gt;If a player gains control of an uncontrolled planet during the &lt;b&gt;Establish Control&lt;/b&gt; step, they explore it.&lt;/li&gt;
        ///    &lt;li&gt;If a player gains control of a legendary planet, they gain the legendary planet ability card in addition to the planet card. The card will not be exhausted if it was readied.&lt;/li&gt;
        ///    &lt;li&gt;If Mecatol Rex has the custodians token on it, a  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Invasion_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Invasion_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Each player has several faction&amp;ndash;specific leader cards that represent characters with unique abilities.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each faction has three leaders; one agent, one commander, and one hero.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;The Nomad&amp;rsquo;s &lt;sc&gt;The Company&lt;/sc&gt; faction ability grants them two additional agents, for a total of five leaders.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;A player&amp;rsquo;s leaders are placed on their leader sheet during setup.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Each leader card is placed on the slo [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Leaders {
            get {
                return ResourceManager.GetString("RuleCategory_Leaders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A commander&amp;rsquo;s ability cannot be applied to the instance of the effect that unlocked it.&lt;/li&gt;
        ///    &lt;li&gt;A commander may be unlocked between two abilities that occur in the same timing window.&lt;/li&gt;
        ///    &lt;li&gt;For notes about a leader of a specific faction, see that faction&amp;rsquo;s page.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Leaders_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Leaders_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Each player has a leader sheet that contains slots for their faction&amp;rsquo;s three leader cards as well as their faction&amp;rsquo;s mech unit card. &lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The leader slots of the leader sheet are where players place their three leader cards during setup. Each slot displays the name of the type of leader that is placed in that slot (agent, commander, and hero) as well as a symbol in the upper&amp;ndash;right that helps players quickly determine which side of those leaders begins the  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_LeaderSheet {
            get {
                return ResourceManager.GetString("RuleCategory_LeaderSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_LeaderSheet_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_LeaderSheet_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Leadership&lt;/i&gt; strategy card allows players to gain command tokens. This card&amp;rsquo;s initiative value is &amp;ldquo;1&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Leadership&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/li&gt;
        ///    &lt;li&gt;To resolve the primary ability on the &lt;i&gt;Leadership&lt;/i&gt; strategy card, the active player gains three command tokens. Then, that player can spend any amount of th [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Leadership {
            get {
                return ResourceManager.GetString("RuleCategory_Leadership", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;The secondary ability of &lt;i&gt;Leadership&lt;/i&gt; does not require a player to spend a strategy token.&lt;/li&gt;
        ///    &lt;li&gt;A player may spend one or two more influence than the amount necessary for the tokens they gain; however, this influence is wasted.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Leadership_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Leadership_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Legendary planets grant the player that controls them unique, planet&amp;ndash;specific abilities.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A legendary planet is indicated by the legendary planet icon.&lt;/li&gt;
        ///    &lt;li&gt;When a player gains control of a legendary planet, they also place its legendary planet ability card in their play area.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;If a player gains control of a legendary planet ability card from the deck, it is readied.&lt;/li&gt;
        ///        &lt;li&gt;If a player gains control of an exhausted leg [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_LegendaryPlanets {
            get {
                return ResourceManager.GetString("RuleCategory_LegendaryPlanets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If a player wishes to resolve the &lt;i&gt;Imperial Arms Vault&lt;/i&gt; ability of Hope&amp;rsquo;s End, but they have no mechs left in their reinforcements, they may remove a mech from any system that does not contain one of their command tokens and place that instead. The mech will be placed undamaged.&lt;/li&gt;
        ///    &lt;li&gt;If an effect instructs a player to &amp;ldquo;end your turn&amp;rdquo;, that player may still resolve any &amp;ldquo;at the end of your turn&amp;rdquo; abilities, including those of legendary plan [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_LegendaryPlanets_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_LegendaryPlanets_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Mecatol Rex is the planet placed in the center of the game board during setup.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During setup, the custodians token is placed on Mecatol Rex. This token prevents a player from committing ground forces to land on the planet unless they spend six influence to remove the token.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_MecatolRex {
            get {
                return ResourceManager.GetString("RuleCategory_MecatolRex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Mecatol Rex is not a legendary planet.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_MecatolRex_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_MecatolRex_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Mechs are unique, faction&amp;ndash;specific heavy ground forces.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Mechs are a type of ground force and can be transported and participate in ground combat.&lt;/li&gt;
        ///    &lt;li&gt;Each player begins with their mech unit card in play on their leader sheet and can produce mechs for the cost presented on the card.&lt;/li&gt;
        ///    &lt;li&gt;Some mechs have &lt;sc&gt;Deploy&lt;/sc&gt; abilities which allow a player to place them on the game board without producing them normally.&lt;/li&gt;
        ///    &lt;li&gt;Mech unit cards are [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Mechs {
            get {
                return ResourceManager.GetString("RuleCategory_Mechs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Effects that refer to &amp;ldquo;ground forces&amp;rdquo; apply to Mechs. Effects that refer to &amp;ldquo;infantry&amp;rdquo; do not.&lt;/li&gt;
        ///    &lt;li&gt;For notes about a mech of a specific faction, see that faction&amp;rsquo;s page.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Mechs_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Mechs_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A modifier is a number that is applied by an ability to increase or decrease the attribute values of a unit or the results of a die roll.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A modifier is always preceded by the word &amp;ldquo;apply&amp;rdquo; followed by a numerical value.&lt;/li&gt;
        ///    &lt;li&gt;A modifier value preceded by a &amp;ldquo;+&amp;rdquo; is added to the attribute or result being modified; a modifier value preceded by a &amp;ldquo;&amp;minus;&amp;rdquo; is subtracted from the attribute or result being modified.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Modifiers {
            get {
                return ResourceManager.GetString("RuleCategory_Modifiers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;&amp;ldquo;Combat roll&amp;rdquo; modifiers do not modify anti&amp;ndash;fighter barrage, bombardment or space cannon rolls.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Modifiers that apply during combat do apply to anti&amp;ndash;fighter barrage rolls.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;When an effect moves a unit to an adjacent system, modifying that unit&amp;rsquo;s move value will have no effect.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Modifiers_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Modifiers_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Move is an attribute of some units that is presented on faction sheets and unit upgrade technology cards.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A unit&amp;rsquo;s move value indicates the distance from its current system that it can move during the &lt;b&gt;Movement&lt;/b&gt; step of a tactical action.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Move {
            get {
                return ResourceManager.GetString("RuleCategory_Move", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;When an effect moves a unit to an adjacent system, modifying that unit&amp;rsquo;s move value will have no effect.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Move_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Move_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A player can move their ships by resolving a tactical action during the action phase. Additionally, some abilities can move a unit outside of the tactical action.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;b&gt;&lt;li&gt;Tactical Action Movement&lt;/li&gt;&lt;/b&gt;
        ///    &lt;li&gt;A ship&amp;rsquo;s move value is presented along with its other attributes on faction sheets and unit upgrade technology cards. This value indicates the distance from its current system that a ship can move.&lt;/li&gt;
        ///    &lt;p&gt;To resolve movement, players perform the followi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Movement {
            get {
                return ResourceManager.GetString("RuleCategory_Movement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;When an effect moves a unit to an adjacent system, modifying that unit&amp;rsquo;s move value will have no effect.&lt;/li&gt;
        ///    &lt;li&gt;An ability may move a player&amp;rsquo;s ship out of a system containing one of the player&amp;rsquo;s faction&amp;rsquo;s commend tokens. However, the transport rules prevent a player&amp;rsquo;s units from being transported from systems containing one of that player&amp;rsquo;s command tokens, other than the active system. An ability that moves a player&amp;rsquo;s ship must also [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Movement_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Movement_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A nebula is an anomaly that affects movement and combat.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A ship can only move into a nebula if it is the active system.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;A ship cannot move through a nebula. That is, a ship cannot move into and out of a nebula during the same movement.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;A ship that begins the &lt;b&gt;Movement&lt;/b&gt; step of a tactical action in a nebula treats its move value as &amp;ldquo;1&amp;rdquo; for the duration of that step.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Other abilities and effects can in [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Nebula {
            get {
                return ResourceManager.GetString("RuleCategory_Nebula", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A player cannot retreat (or similar) into a nebula, since it would not be the active system.&lt;/li&gt;
        ///    &lt;li&gt;The +1 modifier for the defender does not modify anti&amp;ndash;fighter barrage, bombardment or space cannon rolls.&lt;/li&gt;
        ///    &lt;li&gt;The +1 modifier for the defender has no effect during ground combat.&lt;/li&gt;
        ///    &lt;li&gt;A future rule change will place the ship movement restrictions of anomalies upon all units.&lt;/li&gt;
        ///    &lt;li&gt;A future rule change will allow ships to move into a nebula whe [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Nebula_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Nebula_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Two players are neighbors if they both have a unit or control a planet in the same system. They are also neighbors if they both have a unit or control a planet in systems that are adjacent to each other.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players can resolve transactions with their neighbors.&lt;/li&gt;
        ///    &lt;li&gt;Players are neighbors if the adjacency of systems is granted by a wormhole.&lt;/li&gt;
        ///    &lt;li&gt;Players are neighbors with the Ghosts of Creuss if the Ghosts of Creuss&amp;rsquo; &amp;ldquo;Quantum Entanglement&amp;rdqu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Neighbors {
            get {
                return ResourceManager.GetString("RuleCategory_Neighbors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A player may make a deal with any player, however, these deals may only include a transaction if the two players are neighbors.&lt;/li&gt;
        ///    &lt;li&gt;A player may resolve one transaction with each other player per each agenda during the agenda phase, however, the agenda phase does not make all players neighbors.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Neighbors_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Neighbors_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Players can score objectives to gain victory points.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;There are two types of objective cards: public objectives and secret objectives.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Each public objective has a &amp;ldquo;I&amp;rdquo; or &amp;ldquo;II&amp;rdquo; on the back of its card; all other objectives are secret objectives.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;Each objective card indicates a number of victory points that a player gains by scoring that objective.&lt;/li&gt;
        ///    &lt;li&gt;Each objective card indicates the phase during which [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ObjectiveCards {
            get {
                return ResourceManager.GetString("RuleCategory_ObjectiveCards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A status phase objective must have its condition met during the status phase; any activity during the action phase is irrelevant.&lt;/li&gt;
        ///    &lt;li&gt;A player may choose to reveal any or all of the secret objective cards in their hand, if they so choose.&lt;/li&gt;
        ///    &lt;li&gt;If multiple ground combats happen on separate planets as part of a single invasion during one action, one secret objective may be scored during each.&lt;/li&gt;
        ///    &lt;li&gt;The &lt;b&gt;Bombardment&lt;/b&gt; and &lt;b&gt;Space Cannon&lt;/b&gt; steps happe [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ObjectiveCards_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_ObjectiveCards_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During combat, a player&amp;rsquo;s opponent is the other player that either has ships in the system at the start of the space combat or has ground forces on the planet at the start of a ground combat.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players who do not have units on either side of a combat are not opponents. Those players cannot use abilities or have abilities used against them that are used against an opponent.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Opponent {
            get {
                return ResourceManager.GetString("RuleCategory_Opponent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Opponent_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Opponent_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A PDS (planetary defense system) is a structure that allows a player to defend their territory against invading forces.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each PDS has the &lt;sc&gt;Space Cannon&lt;/sc&gt; ability.&lt;/li&gt;
        ///    &lt;li&gt;The primary way by which players acquire PDS units is by resolving either the primary or secondary ability of the &lt;i&gt;Construction&lt;/i&gt; strategy card.&lt;/li&gt;
        ///    &lt;li&gt;A PDS unit is placed on a planet. Each planet can have a maximum of &lt;b&gt;two&lt;/b&gt; PDS units.&lt;/li&gt;
        ///    &lt;li&gt;If a player&amp;rsquo;s PDS i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Pds {
            get {
                return ResourceManager.GetString("RuleCategory_Pds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A PDS is both a structure and a unit.&lt;/li&gt;
        ///    &lt;li&gt;Each PDS also has the &lt;sc&gt;Planetary Shield&lt;/sc&gt; ability.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Pds_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Pds_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Mecatol Rex and planets in home systems do not have traits.&lt;/li&gt;
        ///    &lt;li&gt;Planets with traits can be explored.&lt;/li&gt;
        ///    &lt;li&gt;A planet cannot be spent for both its influence and resources during a single exhaustion.&lt;/li&gt;
        ///    &lt;li&gt;If a planet is exhausted for its technology specialty, it does not provide influence or resources.&lt;/li&gt;
        ///    &lt;li&gt;A player may only exhaust their own planets, unless a game effect specifies otherwise.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Planet_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Planet_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Units cannot use the &lt;sc&gt;Bombardment&lt;/sc&gt; ability against a planet that contains a unit that has the &lt;sc&gt;Planetary Shield&lt;/sc&gt; ability.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The &lt;sc&gt;Planetary Shield&lt;/sc&gt; ability does not prevent a planet from being affected by the &lt;i&gt;X&amp;ndash;89 Bacterial Weapon&lt;/i&gt; technology.&lt;/li&gt;
        ///    &lt;li&gt;The &lt;sc&gt;Planetary Shield&lt;/sc&gt; ability prevents an L1Z1X player from using their &lt;sc&gt;Harrow&lt;/sc&gt; faction ability.&lt;/li&gt;
        ///    &lt;li&gt;If a war sun is in a system with any number of other player [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_PlanetaryShield {
            get {
                return ResourceManager.GetString("RuleCategory_PlanetaryShield", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A unit with the &lt;sc&gt;Planetary Shield&lt;/sc&gt; ability on a planet does not stop of the use of a unit&amp;rsquo;s &lt;sc&gt;Bombardment&lt;/sc&gt; ability on other planets in the same system.&lt;/li&gt;
        ///    &lt;li&gt;The &lt;sc&gt;Planetary Shield&lt;/sc&gt; ability prevents the use of the &lt;i&gt;X&amp;ndash;89 Bacterial Weapon &amp;Omega;&lt;/i&gt; technology.&lt;/li&gt;
        ///    &lt;li&gt;If a war sun causes a unit to be treated as if it does not have a &lt;sc&gt;Planetary Shield&lt;/sc&gt; ability, that unit may still use the ability of the &lt;i&gt;Magen Defense Grid &amp;Om [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_PlanetaryShield_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_PlanetaryShield_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Planets provide players with resources and influence. Planets are on system tiles and each has a name, a resource value, and an influence value. Some planets also have traits.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A planet&amp;rsquo;s resources are indicated by the value on its planet card and system tile that is surrounded by a yellow triangular border.&lt;/li&gt;
        ///    &lt;li&gt;A planet&amp;rsquo;s influence is indicated by the value on its planet card and system tile that is surrounded by a blue hexagonal border.&lt;/li&gt;
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Planets {
            get {
                return ResourceManager.GetString("RuleCategory_Planets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Politics&lt;/i&gt; strategy card allows players to draw action cards. Additionally, the active player chooses a new speaker and looks at cards in the agenda deck. This card&amp;rsquo;s initiative value is &amp;ldquo;3&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Politics&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/li&gt;
        ///    &lt;li&gt;To resolve the primary ability on the &lt;i&gt;Politics&lt;/i&gt; strategy card, the a [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Politics {
            get {
                return ResourceManager.GetString("RuleCategory_Politics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If there are few cards remaining in the action card deck, they will be dealt out in clockwise order from the active player. After those players have discarded down to their seven card hand limit, if necessary, the discard pile will be shuffled to form a new deck. The remaining players (including the player who received the last action card from the previous deck, if applicable) will then be dealt their action cards.&lt;/li&gt;
        ///    &lt;li&gt;When resolving the primary ability of the &lt;i&gt;Politi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Politics_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Politics_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The primary way that a player produces new units is by resolving the &lt;sc&gt;Production&lt;/sc&gt; abilities of existing units during a tactical action. However, other game effects also allow players to produce units.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each unit that a player can produce has a cost value presented on its faction sheet or technology card. To produce a unit, a player must spend a number of resources equal to or greater than the cost value of the unit they are producing.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;S [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ProducingUnits {
            get {
                return ResourceManager.GetString("RuleCategory_ProducingUnits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Whenever a unit is produced, its cost must be paid, unless the effect that is producing the unit explicitly says otherwise.&lt;/li&gt;
        ///    &lt;li&gt;A player cannot produce one fighter and one infantry for one resource.&lt;/li&gt;
        ///    &lt;li&gt;If an effect allows a player produce a ship of a specific type, then factional variations do not prevent that player from producing that type of ship.&lt;/li&gt;
        ///    &lt;li&gt;If a player removes a unit in order to place it, because they have none of that unit type in thei [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_ProducingUnits_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_ProducingUnits_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the &lt;b&gt;Production&lt;/b&gt; step of a tactical action, the active player can resolve the &lt;sc&gt;Production&lt;/sc&gt; ability of each of their units that are in the active system to produce units&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A unit&amp;rsquo;s &lt;sc&gt;Production&lt;/sc&gt; ability, which is presented on a faction sheet or unit upgrade technology card, is always followed by a value. This value is the maximum number of units that this unit can produce.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;If the active player has multiple units in [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Production {
            get {
                return ResourceManager.GetString("RuleCategory_Production", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A unit&amp;rsquo;s &lt;sc&gt;Production&lt;/sc&gt; value is the maximum number of units that may be produced by that unit, regardless of cost. For example, a space dock with &amp;ldquo;&lt;sc&gt;Production&lt;/sc&gt; 6&amp;rdquo; could produce six dreadnoughts or six fighters.&lt;/li&gt;
        ///    &lt;li&gt;Placement of produced units is not limited by a unit&amp;rsquo;s &lt;sc&gt;Production&lt;/sc&gt; value, only by the location of the producing units.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;For example, say a player is performing a tactical action on tile 75. They hav [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Production_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Production_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Each player begins the game with one unique and five generic promissory note cards that can be given to other players.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each promissory note contains timing text and ability text. A player can resolve any of their promissory note cards by following the text on the card.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Promissory notes are &lt;b&gt;not&lt;/b&gt; mandatory unless otherwise specified.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;A player cannot play their color&amp;rsquo;s or faction&amp;rsquo;s promissory notes. Since the cards are [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_PromissoryNotes {
            get {
                return ResourceManager.GetString("RuleCategory_PromissoryNotes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;When two players make a trade for a promissory note, the specific promissory note that was traded may be hidden from other players.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;However, it is public information that a promissory note was traded.&lt;/li&gt;
        ///        &lt;li&gt;The &lt;i&gt;Alliance&lt;/i&gt; and &lt;i&gt;Support for the Throne&lt;/i&gt; promissory notes must be played immediately when received. As such, trading either of these notes cannot be kept hidden.&lt;/li&gt;
        ///    &lt;/ol&gt;
        ///    &lt;li&gt;A player may choose to reveal any or a [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_PromissoryNotes_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_PromissoryNotes_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Purge is a cost that permanently removes a component from the game. If an ability requires that its component is purged, that component can only be used once per game.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;If an ability instructs a player to purge a component, that component is removed from the game and returned to the box.&lt;/li&gt;
        ///    &lt;li&gt;Purged components cannot be used or otherwise returned to the game by any means.&lt;/li&gt;
        ///    &lt;li&gt;When a player is instructed to purge a component, that component is purged ev [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Purge {
            get {
                return ResourceManager.GetString("RuleCategory_Purge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Purge_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Purge_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Cards have a readied state, which indicates that a player can exhaust or resolve the abilities on those cards.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A card that is readied is placed faceup in a player&amp;rsquo;s play area; a card that is exhausted is placed facedown in a player&amp;rsquo;s area.&lt;/li&gt;
        ///    &lt;li&gt;A player can exhaust a readied planet card to spend resources or influence from that card&amp;rsquo;s planet.&lt;/li&gt;
        ///    &lt;li&gt;A player can exhaust certain readied technology cards to resolve those cards&amp;rsquo; abil [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Readied {
            get {
                return ResourceManager.GetString("RuleCategory_Readied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Passive abilities on an exhausted card are still in effect while that card is exhausted.&lt;/li&gt;
        ///    &lt;li&gt;Planets will also ready at the end of each agenda phase. Leaders, relics and technology will not.&lt;/li&gt;
        ///    &lt;li&gt;If a game effect instructs a player to ready a planet, the readied planet must be controlled by that player, unless the game effect specifies otherwise.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Redied_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Redied_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A player&amp;rsquo;s reinforcements is that player&amp;rsquo;s personal supply of units and command tokens that are not on the game board or otherwise in use.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The components in a player&amp;rsquo;s reinforcements are limited.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Reinforcements {
            get {
                return ResourceManager.GetString("RuleCategory_Reinforcements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If a player wishes to place a unit, but there are none of that type left in their reinforcements, they may remove a unit of that type from any system that does not contain one of their command tokens and place that instead.&lt;/li&gt;
        ///    &lt;li&gt;Command tokens on a player&amp;rsquo;s command sheet are not in that player&amp;rsquo;s reinforcements.&lt;/li&gt;
        ///    &lt;li&gt;Captured units are not in any player&amp;rsquo;s reinforcements.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Reinforcements_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Reinforcements_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Relics are powerful artifacts with unique abilities.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players can use the abilities of hazardous, cultural, and industrial relic fragments in their play area to draw cards from the relic deck.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Relic fragments can be found when exploring planets and frontier tokens, and can be exchanged with other players as part of transactions.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;When a player is instructed to gain a relic, they draw the top card of the relic deck and place it faceup i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Relics {
            get {
                return ResourceManager.GetString("RuleCategory_Relics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If the relic deck is empty, a player may still purge three relic fragments as an action.&lt;/li&gt;
        ///    &lt;li&gt;If an eliminated player had any relic fragments, they are discarded to their respective exploration discard piles. If an eliminated player had any relics, they are purged.&lt;/li&gt;
        ///    &lt;li&gt;For notes about specific relics, see the Relic page.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Relics_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Relics_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some game effects instruct a player to reroll dice.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;When a die is rerolled, its new result is used instead of its previous result.&lt;/li&gt;
        ///    &lt;li&gt;The same ability cannot be used to reroll the same die multiple times, but multiple abilities can be used to reroll a single die.&lt;/li&gt;
        ///    &lt;li&gt;Die rerolls must occur after rolling the dice, before other abilities are resolved.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Rerolls {
            get {
                return ResourceManager.GetString("RuleCategory_Rerolls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Effects that reroll &amp;ldquo;combat rolls&amp;rdquo; do not reroll anti&amp;ndash;fighter barrage, bombardment or space cannon rolls.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Reroll effects that apply during combat do apply to anti&amp;ndash;fighter barrage rolls.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Rerolls_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Rerolls_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Resources represent a planet&amp;rsquo;s material value and industry. Many game effects, such as producing units, require players to spend resources.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A planet&amp;rsquo;s resources are the leftmost value that is surrounded by a yellow border on the planet&amp;rsquo;s system tile and planet card.&lt;/li&gt;
        ///    &lt;li&gt;A player spends a planet&amp;rsquo;s resources by exhausting its card.&lt;/li&gt;
        ///    &lt;li&gt;A player can spend a trade good as if it were one resource.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Resources {
            get {
                return ResourceManager.GetString("RuleCategory_Resources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Resources_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Resources_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A ship is a unit type consisting of carriers, cruisers, dreadnoughts, destroyers, fighters, and war suns. Each race also has a unique flagship.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Ships are always placed in space.&lt;/li&gt;
        ///    &lt;li&gt;A player can have a number of ships in a system equal to or less than the number of command tokens in that player&amp;rsquo;s fleet pool.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Fighters do not count toward the fleet pool limit, and instead count against a player&amp;rsquo;s capacity.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;Ships c [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Ships {
            get {
                return ResourceManager.GetString("RuleCategory_Ships", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A Fighter II may count towards either the fleet pool limit or a player&amp;rsquo;s capacity.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Ships_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Ships_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A unit that has the &lt;sc&gt;Space Cannon&lt;/sc&gt; ability can use it during two different steps of a player&amp;rsquo;s tactical action: after the &lt;b&gt;Move Ships&lt;/b&gt; substep (&lt;b&gt;Space Cannon Offense&lt;/b&gt;) and during an invasion (&lt;b&gt;Space Cannon Defense&lt;/b&gt;).&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A player is &lt;b&gt;not&lt;/b&gt; required to be the active player to use their &lt;sc&gt;Space Cannon&lt;/sc&gt; ability of their units.&lt;/li&gt;
        ///    &lt;b&gt;&lt;li&gt;Space Cannon Offense&lt;/li&gt;&lt;/b&gt;
        ///    &lt;p&gt;During a tactical action, after the &lt;b&gt;Move Ships&lt;/b&gt; subst [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_SpaceCannon {
            get {
                return ResourceManager.GetString("RuleCategory_SpaceCannon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;&amp;ldquo;&lt;sc&gt;Deep Space Cannon&lt;/sc&gt;&amp;rdquo; is not a term with meaning within the rules. It is, however, used within the notes on this website as a shorthand for &lt;sc&gt;Space Cannon&lt;/sc&gt; abilities that can be used against ships in an adjacent system.&lt;/li&gt;
        ///    &lt;li&gt;The &lt;b&gt;Space Cannon Offense&lt;/b&gt; step happens before combat. Any secret objectives that require winning a combat or similar cannot be scored if all of one player&amp;rsquo;s ships in a system are destroyed during this step.&lt;/li&gt;
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_SpaceCannon_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_SpaceCannon_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;After resolving the &lt;b&gt;Space Cannon Offense&lt;/b&gt; step of a tactical action, if two players have ships in the active system, those players must resolve a space combat.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;If the active player is the only player with ships in the system, they skip the &lt;b&gt;Space Combat&lt;/b&gt; step of the tactical action and proceeds to the &lt;b&gt;Invasion&lt;/b&gt; step.&lt;/li&gt;
        ///    &lt;li&gt;If an ability occurs &amp;ldquo;before combat&amp;rdquo;, it occurs immediately before the &lt;b&gt;Anti&amp;ndash;Fighter Barrage&lt;/b&gt; step.&lt;/ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_SpaceCombat {
            get {
                return ResourceManager.GetString("RuleCategory_SpaceCombat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A player&amp;rsquo;s fighters and ground forces do not count against capacity during combat. At the end of combat, any excess units are removed and returned to that player&amp;rsquo;s reinforcements.&lt;/li&gt;
        ///    &lt;li&gt;A player may retreat into an asteroid field only if that player owns the &lt;i&gt;Antimass Deflectors&lt;/i&gt; technology.&lt;/li&gt;
        ///    &lt;li&gt;A player may retreat into a supernova only if that player owns the &lt;i&gt;Magmus Reactor&lt;/i&gt; Muaat factional technology.&lt;/li&gt;
        ///    &lt;li&gt;A player cannot retrea [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_SpaceCombat_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_SpaceCombat_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A space dock is a structure that allows players to produce units.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each space dock has a &lt;sc&gt;Production&lt;/sc&gt; ability that indicates the number of units it can produce.&lt;/li&gt;
        ///    &lt;li&gt;The primary way in which players acquire space docks is by resolving either the primary or secondary abilities of the &lt;i&gt;Construction&lt;/i&gt; strategy card.&lt;/li&gt;
        ///    &lt;li&gt;Space docks are placed on planets. Each planet can have a maximum of &lt;b&gt;one&lt;/b&gt; space dock.&lt;/li&gt;
        ///    &lt;li&gt;If a player&amp;rsquo;s  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_SpaceDock {
            get {
                return ResourceManager.GetString("RuleCategory_SpaceDock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A Space Dock is both a structure and a unit.&lt;/li&gt;
        ///	&lt;li&gt;Fighters transported during movement remain assigned to the transporting ship until movement is complete. They cannot be counted towards a space dock&amp;rsquo;s allocation until after movement is complete.&lt;/li&gt;
        ///	&lt;ol&gt;&lt;li&gt;If a player moves one of their units with capacity into a system, transporting fighters, they cannot pick up ground forces from a planet in that system with that ship by transferring those fighters to a space do [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_SpaceDock_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_SpaceDock_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The speaker is the player who has the speaker token.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the strategy phase, the speaker is the first player to choose a strategy card.&lt;/li&gt;
        ///    &lt;li&gt;During the agenda phase, the speaker reveals the top agenda card from the agenda deck before each vote. The speaker is always the last player to vote and decides which outcome to resolve if the outcomes are tied.&lt;/li&gt;
        ///    &lt;li&gt;During setup, the speaker prepares the objectives.&lt;/li&gt;
        ///    &lt;li&gt;During the status phase, the  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Speaker {
            get {
                return ResourceManager.GetString("RuleCategory_Speaker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;During the strategy and agenda phases, the speaker will have the first opportunity to resolve abilities during each timing window.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Speaker_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Speaker_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the status phase, players score objectives and prepare for the next game round. To resolve the status phase, players perform the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1 &amp;ndash; Score Objectives&lt;/b&gt;: Following initiative order, each player may score up to one public objective and one secret objective that can be fulfilled during the status phase. To score an objective, a player must fulfill the requirements on the card; if that player does, they gain a number of victory points [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_StatusPhase {
            get {
                return ResourceManager.GetString("RuleCategory_StatusPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A player cannot score public objectives if that player does not control each planet in their home system.&lt;/li&gt;
        ///    &lt;li&gt;If there are few cards remaining in the action card deck, they will be dealt out first to the players lowest in initiative order. After those players have discarded down to their seven card hand limit, if necessary, the discard pile will be shuffled to form a new deck. The remaining players (including the player who received the last action card from the previous [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_StatusPhase_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_StatusPhase_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the action phase, the active player may perform a strategic action to resolve the primary ability on their strategy card.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;After the active player resolves the primary ability on their strategy card, each other player, beginning with the player to the left of the active player and proceeding clockwise, may resolve that strategy card&amp;rsquo;s secondary ability.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Players do not have to resolve the secondary abilities of the active player&amp;rsquo;s stra [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_StrategicAction {
            get {
                return ResourceManager.GetString("RuleCategory_StrategicAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_StrategicAction_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_StrategicAction_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Strategy cards determine initiative order and provide each player with a powerful ability that they can use one time during the action phase.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the strategy phase, each player chooses a strategy card from the common play area and places it in their play area faceup.&lt;/li&gt;
        ///    &lt;li&gt;Each strategy card has a readied and an exhausted side.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;The readied side contains the strategy card&amp;rsquo;s name, initiative number, and abilities.&lt;/li&gt;
        ///       [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_StrategyCard {
            get {
                return ResourceManager.GetString("RuleCategory_StrategyCard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;During three&amp;ndash; and four&amp;ndash;player games, each player will choose two strategy cards during the strategy phase.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Players will use the lower of the two initiative numbers on their strategy cards to determine the initiative order.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_StrategyCard_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_StrategyCard_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;During the strategy phase, each player chooses a strategy card to use during the round.&lt;/p&gt;
        ///&lt;p&gt;To resolve the strategy phase, players perform the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1&lt;/b&gt;: Starting with the speaker and proceeding clockwise, each player chooses one strategy card from the common play area and places it faceup in their play area.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;If there are one or more trade good tokens on a strategy card when a player chooses it, that player gains thos [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_StrategyPhase {
            get {
                return ResourceManager.GetString("RuleCategory_StrategyPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If a player chooses a strategy card, but later loses it, they will keep any trade goods that were on the strategy card.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_StrategyPhase_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_StrategyPhase_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A structure is a type of unit. PDS units and space docks are structures.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Structures are always placed on planets.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;The Clan of Saar&amp;rsquo;s &amp;ldquo;Floating Factory&amp;rdquo; faction&amp;ndash;specific space dock is placed in a system&amp;rsquo;s space area.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;Structures are primarily placed on planets using the &lt;i&gt;Construction&lt;/i&gt; strategy card.&lt;/li&gt;
        ///    &lt;li&gt;Structures cannot move or be transported.&lt;/li&gt;
        ///    &lt;li&gt;A player can have a maximum of &lt;b [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Structures {
            get {
                return ResourceManager.GetString("RuleCategory_Structures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Structures_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Structures_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A supernova is an anomaly that affects movement.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;A ship cannot move through or into a supernova.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Supernova {
            get {
                return ResourceManager.GetString("RuleCategory_Supernova", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If a ship finds itself in a supernova by some uncommon game effect, it may remain there and move out without harm.&lt;/li&gt;
        ///    &lt;li&gt;A future rule change will place the ship movement restrictions of anomalies upon all units.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Supernova_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Supernova_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some units have the &lt;sc&gt;Sustain Damage&lt;/sc&gt; ability. Immediately before a player assigns hits to their units, that player can use the &lt;sc&gt;Sustain Damage&lt;/sc&gt; ability of any of their units in the active system.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;For each &lt;sc&gt;Sustain Damage&lt;/sc&gt; ability that a player uses, one hit produced by another player&amp;rsquo;s units is canceled. Then, each unit using this ability is placed on its side to indicate that it is damaged.&lt;/li&gt;
        ///    &lt;li&gt;A damaged unit does not have reduced c [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_SustainDamage {
            get {
                return ResourceManager.GetString("RuleCategory_SustainDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_SustainDamage_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_SustainDamage_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A system tile represents an area of the galaxy. Players place system tiles during setup to create the game board.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The back of each system tile is colored green, blue, or red.&lt;/li&gt;
        ///    &lt;li&gt;System tiles with a green&amp;ndash;colored back are home systems and faction&amp;ndash;specific tiles. Each home system is unique to one of the game&amp;rsquo;s factions.&lt;/li&gt;
        ///    &lt;li&gt;System tiles with a blue&amp;ndash;colored back each contain one or more planets.&lt;/li&gt;
        ///    &lt;li&gt;System tiles with a [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_SystemTiles {
            get {
                return ResourceManager.GetString("RuleCategory_SystemTiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_SystemTiles_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_SystemTiles_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The tactical action is the primary method by which players produce units, move ships, and extend their dominion within the galaxy. To perform a tactical action, the active player performs the following steps:&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1 &amp;ndash; Activation&lt;/b&gt;: The active player must activate a system that does not contain one of their command tokens.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;To activate a system, the active player places a command token from their tactic pool in that system. That syst [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_TacticalAction {
            get {
                return ResourceManager.GetString("RuleCategory_TacticalAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Each of these five steps happen during every tactical action, unless explicitly skipped; the active player does not have to choose between fighting a combat or producing units, for example.&lt;/li&gt;
        ///    &lt;li&gt;Any abilities that occur at the end of an action happen before any abilities that occur at the end of a player&amp;rsquo;s turn.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_TacticalAction_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_TacticalAction_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Technology&lt;/i&gt; strategy card allows players to research new technology. This card&amp;rsquo;s initiative value is &amp;ldquo;7&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Technology&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/li&gt;
        ///    &lt;li&gt;To resolve the primary ability on the &lt;i&gt;Technology&lt;/i&gt; strategy card, the active player can research one technology of their choice. Then, they may research [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Technology {
            get {
                return ResourceManager.GetString("RuleCategory_Technology", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Technology_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Technology_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Technology cards allow players to upgrade units and acquire powerful abilities.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Each player places any technology they have gained faceup near their faction sheet. For the duration of the game, they &lt;b&gt;own&lt;/b&gt; any technology cards they gain and can use the abilities on those cards.&lt;/li&gt;
        ///    &lt;li&gt;A player does not own any technology card that is in their technology deck.&lt;/li&gt;
        ///    &lt;li&gt;A player can gain a technology card from their technology deck by researching technolog [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_TechnologySystem {
            get {
                return ResourceManager.GetString("RuleCategory_TechnologySystem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If a player is instructed to research a technology by any game effect, that player must meet the prerequisites for the technology they research.&lt;/li&gt;
        ///    &lt;li&gt;If a player is instructed to gain a technology, that player does not have to meet the prerequisites, although most game effects that do this will specify what technologies may be gained by that effect.&lt;/li&gt;
        ///    &lt;li&gt;If a player is playing a faction with a faction&amp;ndash;specific unit upgrade, they cannot research the generic  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_TechnologySystem_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_TechnologySystem_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Trade&lt;/i&gt; strategy card allows players to gain trade goods and replenish commodities. This card&amp;rsquo;s initiative value is &amp;ldquo;5&amp;rdquo;.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the action phase, if the active player has the &lt;i&gt;Trade&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability. To resolve the primary ability on the &lt;i&gt;Trade&lt;/i&gt; strategy card, the active player resolves the following effects in order:&lt;/li&gt;
        ///    &lt;li&gt;&lt;b&gt;Step 1&lt;/b&gt;: The acti [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Trade {
            get {
                return ResourceManager.GetString("RuleCategory_Trade", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Say, for example, Alice is the active player, and is performing a strategic action with the &lt;i&gt;Trade&lt;/i&gt; strategy card. To her left is Bob. To his left is Cheng, then Diego, then Esther, then Fahd. The full order of steps is:&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;Alice gains three trade goods.&lt;/li&gt;
        ///        &lt;li&gt;Alice replenishes her commodities.&lt;/li&gt;
        ///        &lt;li&gt;Alice chooses players for the secondary.&lt;/li&gt;
        ///        &lt;li&gt;Bob may/must replenish his commodities by performing the secondary abi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Trade_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Trade_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A trade good represents a player&amp;rsquo;s buying and trading power beyond their planet&amp;rsquo;s raw resources.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Trade goods and commodities are represented by opposite sides of the same token.&lt;/li&gt;
        ///    &lt;li&gt;When a player gains a trade good, they take a trade good token from the supply and place it on the trade good area on their command sheet, making sure the trade good side is faceup.&lt;/li&gt;
        ///    &lt;li&gt;A player can spend trade goods at any time during the game.&lt;/li&gt;
        ///    &lt;li&gt; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_TradeGoods {
            get {
                return ResourceManager.GetString("RuleCategory_TradeGoods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_TradeGoods_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_TradeGoods_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A transaction is a way for a player to exchange commodities, trade goods, promissory notes, and relic fragments.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;During the active player&amp;rsquo;s turn, they may resolve up to one transaction with each of their neighbors.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;A player can resolve a transaction at any time during their turn, even during a combat.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;li&gt;To resolve a transaction, a player gives any number of trade goods and commodities and up to one promissory note to a neighbor i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Transactions {
            get {
                return ResourceManager.GetString("RuleCategory_Transactions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;Relic fragments may be traded. Relics themselves cannot be.&lt;/li&gt;
        ///    &lt;li&gt;Captured units may be returned to the player that originally owned them as part of a transaction.&lt;/li&gt;
        ///    &lt;li&gt;If a player becomes neighbors with another player on their turn, they may then perform a transaction with that player.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;If a player stops being neighbors with another player that they have performed a transaction with this turn, but then becomes neighbors with that player [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Transactions_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Transactions_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;When a ship moves, it may transport any combination of fighters and ground forces, but the number of units it transports cannot exceed that ship&amp;rsquo;s capacity value.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The ship can pick up and transport fighters and ground forces when it moves. During a tactical action, it can pick up and transport units from the active system, the system it started its movement in, and each system it moves through.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;These transported units remain with the tr [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Transport {
            get {
                return ResourceManager.GetString("RuleCategory_Transport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A ship that can both move and be transported (i.e. Fighter II) cannot do both by &amp;ldquo;meeting&amp;rdquo; a ship with capacity partway though a tactical action movement, as all movement is simultaneous.&lt;/li&gt;
        ///    &lt;li&gt;A ship may transport as it retreats or is otherwise moved out of the active system, as the units it transports will be picked up from the active system.&lt;/li&gt;
        ///    &lt;li&gt;A ship may pick up ground forces from a planet in the active system, usually to invade a different plane [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Transport_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Transport_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A unit is represented by a plastic figure.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;There are three types of units: ships, ground forces, and structures.&lt;/li&gt;
        ///    &lt;li&gt;Each color of plastic comes with the following units:&lt;/li&gt;
        ///    &lt;ul&gt;
        ///        &lt;li&gt;3 Space Docks&lt;/li&gt;
        ///        &lt;li&gt;6 PDS units&lt;/li&gt;
        ///        &lt;li&gt;8 Destroyers&lt;/li&gt;
        ///        &lt;li&gt;8 Cruisers&lt;/li&gt;
        ///        &lt;li&gt;2 War Suns&lt;/li&gt;
        ///        &lt;li&gt;12 Infantry&lt;/li&gt;
        ///        &lt;li&gt;10 Fighters&lt;/li&gt;
        ///        &lt;li&gt;4 Carriers&lt;/li&gt;
        ///        &lt;li&gt;5 Dreadnoughts&lt;/li&gt;
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Units {
            get {
                return ResourceManager.GetString("RuleCategory_Units", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If an effect allows a player produce a ship of a specific type, then factional variations do not prevent that player from producing that type of ship.&lt;/li&gt;
        ///    &lt;li&gt;Units are component limited.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;Fighters and infantry are semi&amp;ndash;limited, via the use of tokens.&lt;/li&gt;&lt;/ol&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Units_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Units_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;A unit upgrade is a type of technology card.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Unit upgrades share a name with a unit that is printed on a player&amp;rsquo;s faction sheet, but have a higher roman numeral. For example, a player&amp;rsquo;s &amp;ldquo;Carrier I&amp;rdquo; unit is upgraded by the unit upgrade technology &amp;ldquo;Carrier II&amp;rdquo;.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;The Nekro Virus player may upgrade their units with units of the same type (e.g., &amp;ldquo;dreadnought&amp;rdquo; or &amp;ldquo;infantry&amp;rdquo;) even if those unit&amp;rsquo; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_UnitUpgrades {
            get {
                return ResourceManager.GetString("RuleCategory_UnitUpgrades", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If a player is playing a faction with a faction&amp;ndash;specific unit upgrade, they cannot research the generic upgrade for that unit type.&lt;/li&gt;
        ///    &lt;li&gt;For notes about specific generic unit upgrades, see the Technolgoies (Unit upgrades) page.&lt;/li&gt;
        ///    &lt;li&gt;For notes about a technologies of a specific faction, see that faction&amp;rsquo;s notes.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_UnitUpgrades_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_UnitUpgrades_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The first player to gain 10 victory points wins the game.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;Players gain victory points in a variety of ways. A common way that a player can gain victory points is by scoring objectives.&lt;/li&gt;
        ///    &lt;li&gt;Each player uses the victory point track to indicate the number of victory points they have gained.&lt;/li&gt;
        ///    &lt;ol&gt;&lt;li&gt;If the players are using the 14&amp;ndash;space side of the victory point track, the game ends and a player wins when they have 14 victory points instead of 10.&lt; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_VictoryPoints {
            get {
                return ResourceManager.GetString("RuleCategory_VictoryPoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_VictoryPoints_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_VictoryPoints_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The &lt;i&gt;Warfare&lt;/i&gt; strategy card allows a player to remove a command token from the board and redistribute their command tokens between their tactic, fleet, and strategy pools. This card&amp;rsquo;s initiative value is &amp;ldquo;6&amp;rdquo;. During the action phase, if the active player has the &lt;i&gt;Warfare&lt;/i&gt; strategy card, they can perform a strategic action to resolve that card&amp;rsquo;s primary ability.&lt;/p&gt;
        ///&lt;p&gt;To resolve the primary ability on the &lt;i&gt;Warfare&lt;/i&gt; strategy card, the active player performs the foll [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Warfare {
            get {
                return ResourceManager.GetString("RuleCategory_Warfare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;If the player with &lt;i&gt;Warfare&lt;/i&gt; has no command tokens on the game board, they may still perform a strategic action. However, they will not gain a command token.&lt;/li&gt;
        ///    &lt;/ol&gt;.
        /// </summary>
        public static string RuleCategory_Warfare_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Warfare_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;The wormhole nexus is a system tile where several wormholes converge.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;The wormhole nexus begins the game in play with its inactive side up.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;The inactive side of the wormhole nexus contains a gamma wormhole. The active side of the wormhole nexus contains an alpha, beta, and gamma wormhole.&lt;/li&gt;
        ///        &lt;li&gt;The wormhole nexus is treated as part of the game board.&lt;/li&gt;
        ///        &lt;li&gt;The wormhole nexus is on the edge of the game board.&lt;/li&gt;
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_WormholeNexus {
            get {
                return ResourceManager.GetString("RuleCategory_WormholeNexus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;The wormhole nexus will flip if a unit exists in the system while inactive, even if that unit did not move through a gamma wormhole.&lt;/li&gt;
        ///    &lt;li&gt;As the wormhole nexus becomes active at the end of the &lt;b&gt;Movement&lt;/b&gt; step, only units with the &lt;sc&gt;Deep Space Cannon&lt;/sc&gt; ability in systems containing a gamma wormhole will be able to produce hits during the &lt;b&gt;Space Cannon Offense&lt;/b&gt; step.&lt;/li&gt;
        ///    &lt;li&gt;If the Creuss player moves their &lt;i&gt;Hil Colish&lt;/i&gt; flagship into the inactive w [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_WormholeNexus_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_WormholeNexus_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Some systems contain wormholes. Systems that contain identical wormholes are adjacent.&lt;/p&gt;
        ///    &lt;ol class=&quot;lrr&quot;&gt;
        ///    &lt;li&gt;There are two basic types of wormholes: alpha and beta.&lt;/li&gt;
        ///    &lt;li&gt;If a player has a PDS unit upgrade technology, they can use the &lt;sc&gt;Space Cannon&lt;/sc&gt; abilities of their PDS units through wormholes.&lt;/li&gt;
        ///    &lt;li&gt;Players can be neighbors and perform transactions through wormholes.&lt;/li&gt;
        ///    &lt;li&gt;There are two advanced types of wormhole: delta and gamma. These wormholes follow all  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Wormholes {
            get {
                return ResourceManager.GetString("RuleCategory_Wormholes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ol class=&quot;note&quot;&gt;
        ///    &lt;li&gt;A system with a wormhole is not an anomaly.&lt;/li&gt;
        ///    &lt;li&gt;If a system contains multiple wormholes of the same type, those are treated as separate wormholes.&lt;/li&gt;
        ///    &lt;li&gt;A system cannot be adjacent to itself, even if it has multiple wormholes in it.&lt;/li&gt;
        ///    &lt;li&gt;A player chooses the path of adjacent systems each ship moves through during movement. If two systems on that path are adjacent because of a wormhole, that ship moves through that wormhole.&lt;/li&gt;
        ///    &lt;ol&gt;
        ///        &lt;li&gt;If [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RuleCategory_Wormholes_Notes {
            get {
                return ResourceManager.GetString("RuleCategory_Wormholes_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Abilities.
        /// </summary>
        public static string RuleCategoryTitle_Abilities {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Abilities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action Cards.
        /// </summary>
        public static string RuleCategoryTitle_ActionCards {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ActionCards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action Phase.
        /// </summary>
        public static string RuleCategoryTitle_ActionPhase {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ActionPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Active Player.
        /// </summary>
        public static string RuleCategoryTitle_ActivePlayer {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ActivePlayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Active System.
        /// </summary>
        public static string RuleCategoryTitle_ActiveSystem {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ActiveSystem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adjacency.
        /// </summary>
        public static string RuleCategoryTitle_Adjacency {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Adjacency", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Agenda Card.
        /// </summary>
        public static string RuleCategoryTitle_AgendaCard {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_AgendaCard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Agenda Phase.
        /// </summary>
        public static string RuleCategoryTitle_AgendaPhase {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_AgendaPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Anomalies.
        /// </summary>
        public static string RuleCategoryTitle_Anomalies {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Anomalies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Anti-Fighter Barrage.
        /// </summary>
        public static string RuleCategoryTitle_AntiFighterBarrage {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_AntiFighterBarrage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asteroid Field.
        /// </summary>
        public static string RuleCategoryTitle_AsteroidField {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_AsteroidField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attach.
        /// </summary>
        public static string RuleCategoryTitle_Attach {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Attach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attacker.
        /// </summary>
        public static string RuleCategoryTitle_Attacker {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Attacker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blockaded.
        /// </summary>
        public static string RuleCategoryTitle_Blockaded {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Blockaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bombardment.
        /// </summary>
        public static string RuleCategoryTitle_Bombardment {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Bombardment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capacity.
        /// </summary>
        public static string RuleCategoryTitle_Capacity {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Capacity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capture.
        /// </summary>
        public static string RuleCategoryTitle_Capture {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Capture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Combat.
        /// </summary>
        public static string RuleCategoryTitle_Combat {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Combat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command Sheet.
        /// </summary>
        public static string RuleCategoryTitle_CommandSheet {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_CommandSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command Tokens.
        /// </summary>
        public static string RuleCategoryTitle_CommandTokens {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_CommandTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commodities.
        /// </summary>
        public static string RuleCategoryTitle_Commodities {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Commodities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Component Action.
        /// </summary>
        public static string RuleCategoryTitle_ComponentAction {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ComponentAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Component Limitations.
        /// </summary>
        public static string RuleCategoryTitle_ComponentLimitations {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ComponentLimitations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Construction.
        /// </summary>
        public static string RuleCategoryTitle_Construction {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Construction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Control.
        /// </summary>
        public static string RuleCategoryTitle_Control {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Control", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cost.
        /// </summary>
        public static string RuleCategoryTitle_Cost {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Cost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custodians Token.
        /// </summary>
        public static string RuleCategoryTitle_CustodiansToken {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_CustodiansToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deals.
        /// </summary>
        public static string RuleCategoryTitle_Deals {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Deals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Defender.
        /// </summary>
        public static string RuleCategoryTitle_Defender {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Defender", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deploy.
        /// </summary>
        public static string RuleCategoryTitle_Deploy {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Deploy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Destroyed.
        /// </summary>
        public static string RuleCategoryTitle_Destroyed {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Destroyed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Diplomacy.
        /// </summary>
        public static string RuleCategoryTitle_Diplomacy {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Diplomacy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elimination.
        /// </summary>
        public static string RuleCategoryTitle_Elimination {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Elimination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exhausted.
        /// </summary>
        public static string RuleCategoryTitle_Exhausted {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Exhausted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exploration.
        /// </summary>
        public static string RuleCategoryTitle_Exploration {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Exploration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fighter Tokens.
        /// </summary>
        public static string RuleCategoryTitle_FighterTokens {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_FighterTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fleet Pool.
        /// </summary>
        public static string RuleCategoryTitle_FleetPool {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_FleetPool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Frontier Tokens.
        /// </summary>
        public static string RuleCategoryTitle_FrontierTokens {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_FrontierTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game Board.
        /// </summary>
        public static string RuleCategoryTitle_GameBoard {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_GameBoard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game Round.
        /// </summary>
        public static string RuleCategoryTitle_GameRound {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_GameRound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gravity Rift.
        /// </summary>
        public static string RuleCategoryTitle_GravityRift {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_GravityRift", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ground Combat.
        /// </summary>
        public static string RuleCategoryTitle_GroundCombat {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_GroundCombat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ground Forces.
        /// </summary>
        public static string RuleCategoryTitle_GroundForces {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_GroundForces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hyperlanes.
        /// </summary>
        public static string RuleCategoryTitle_Hyperlanes {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Hyperlanes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imperial.
        /// </summary>
        public static string RuleCategoryTitle_Imperial {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Imperial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Infantry Tokens.
        /// </summary>
        public static string RuleCategoryTitle_InfantryTokens {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_InfantryTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Influence.
        /// </summary>
        public static string RuleCategoryTitle_Influence {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Influence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initiative Order.
        /// </summary>
        public static string RuleCategoryTitle_InitiativeOrder {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_InitiativeOrder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invasion.
        /// </summary>
        public static string RuleCategoryTitle_Invasion {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Invasion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leaders.
        /// </summary>
        public static string RuleCategoryTitle_Leaders {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Leaders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leader Sheet.
        /// </summary>
        public static string RuleCategoryTitle_LeaderSheet {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_LeaderSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leadership.
        /// </summary>
        public static string RuleCategoryTitle_Leadership {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Leadership", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Legendary Planets.
        /// </summary>
        public static string RuleCategoryTitle_LegendaryPlanets {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_LegendaryPlanets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mecatol Rex.
        /// </summary>
        public static string RuleCategoryTitle_MecatolRex {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_MecatolRex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mechs.
        /// </summary>
        public static string RuleCategoryTitle_Mechs {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Mechs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modifiers.
        /// </summary>
        public static string RuleCategoryTitle_Modifiers {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Modifiers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move.
        /// </summary>
        public static string RuleCategoryTitle_Move {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Move", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Movement.
        /// </summary>
        public static string RuleCategoryTitle_Movement {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Movement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nebula.
        /// </summary>
        public static string RuleCategoryTitle_Nebula {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Nebula", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Neighbors.
        /// </summary>
        public static string RuleCategoryTitle_Neighbors {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Neighbors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Objective Cards.
        /// </summary>
        public static string RuleCategoryTitle_ObjectiveCards {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ObjectiveCards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opponent.
        /// </summary>
        public static string RuleCategoryTitle_Opponent {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Opponent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pds.
        /// </summary>
        public static string RuleCategoryTitle_Pds {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Pds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Planetary Shield.
        /// </summary>
        public static string RuleCategoryTitle_PlanetaryShield {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_PlanetaryShield", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Planets.
        /// </summary>
        public static string RuleCategoryTitle_Planets {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Planets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Politics.
        /// </summary>
        public static string RuleCategoryTitle_Politics {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Politics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Producing Units.
        /// </summary>
        public static string RuleCategoryTitle_ProducingUnits {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_ProducingUnits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Production.
        /// </summary>
        public static string RuleCategoryTitle_Production {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Production", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Promissory Notes.
        /// </summary>
        public static string RuleCategoryTitle_PromissoryNotes {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_PromissoryNotes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Purge.
        /// </summary>
        public static string RuleCategoryTitle_Purge {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Purge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Readied.
        /// </summary>
        public static string RuleCategoryTitle_Readied {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Readied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reinforcements.
        /// </summary>
        public static string RuleCategoryTitle_Reinforcements {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Reinforcements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Relics.
        /// </summary>
        public static string RuleCategoryTitle_Relics {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Relics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rerolls.
        /// </summary>
        public static string RuleCategoryTitle_Rerolls {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Rerolls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resources.
        /// </summary>
        public static string RuleCategoryTitle_Resources {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Resources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ships.
        /// </summary>
        public static string RuleCategoryTitle_Ships {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Ships", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Space Cannon.
        /// </summary>
        public static string RuleCategoryTitle_SpaceCannon {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_SpaceCannon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Space Combat.
        /// </summary>
        public static string RuleCategoryTitle_SpaceCombat {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_SpaceCombat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Space Dock.
        /// </summary>
        public static string RuleCategoryTitle_SpaceDock {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_SpaceDock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Speaker.
        /// </summary>
        public static string RuleCategoryTitle_Speaker {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Speaker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status Phase.
        /// </summary>
        public static string RuleCategoryTitle_StatusPhase {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_StatusPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strategic Action.
        /// </summary>
        public static string RuleCategoryTitle_StrategicAction {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_StrategicAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strategy Card.
        /// </summary>
        public static string RuleCategoryTitle_StrategyCard {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_StrategyCard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strategy Phase.
        /// </summary>
        public static string RuleCategoryTitle_StrategyPhase {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_StrategyPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Structures.
        /// </summary>
        public static string RuleCategoryTitle_Structures {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Structures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supernova.
        /// </summary>
        public static string RuleCategoryTitle_Supernova {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Supernova", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sustain Damage.
        /// </summary>
        public static string RuleCategoryTitle_SustainDamage {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_SustainDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System Tiles.
        /// </summary>
        public static string RuleCategoryTitle_SystemTiles {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_SystemTiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tactical Action.
        /// </summary>
        public static string RuleCategoryTitle_TacticalAction {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_TacticalAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Technology.
        /// </summary>
        public static string RuleCategoryTitle_Technology {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Technology", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Technologies.
        /// </summary>
        public static string RuleCategoryTitle_TechnologySystem {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_TechnologySystem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trade.
        /// </summary>
        public static string RuleCategoryTitle_Trade {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Trade", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trade Goods.
        /// </summary>
        public static string RuleCategoryTitle_TradeGoods {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_TradeGoods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transactions.
        /// </summary>
        public static string RuleCategoryTitle_Transactions {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Transactions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transport.
        /// </summary>
        public static string RuleCategoryTitle_Transport {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Transport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Units.
        /// </summary>
        public static string RuleCategoryTitle_Units {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Units", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unit Upgrades.
        /// </summary>
        public static string RuleCategoryTitle_UnitUpgrades {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_UnitUpgrades", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Victory Points.
        /// </summary>
        public static string RuleCategoryTitle_VictoryPoints {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_VictoryPoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warfare.
        /// </summary>
        public static string RuleCategoryTitle_Warfare {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Warfare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wormhole Nexus.
        /// </summary>
        public static string RuleCategoryTitle_WormholeNexus {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_WormholeNexus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wormholes.
        /// </summary>
        public static string RuleCategoryTitle_Wormholes {
            get {
                return ResourceManager.GetString("RuleCategoryTitle_Wormholes", resourceCulture);
            }
        }
    }
}
