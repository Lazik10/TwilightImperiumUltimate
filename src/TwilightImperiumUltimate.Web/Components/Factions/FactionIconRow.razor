@using TwilightImperiumUltimate.Web.Models.Factions;
@using TwilightImperiumUltimate.Web.Resources;
@using TwilightImperiumUltimate.Web.Services.HttpClients
@using TwilightImperiumUltimate.Web.Services.Path;
@inject ITwilightImperiumApiHttpClient HttpClient
@inject IPathProvider PathProvider

@if (_factions is not null)
{
    <div class="icon-row">
        @if (_factions.Count > 0)
        {
            @foreach (var faction in _factions)
            {
                <div class="link" @onclick="() => FactionClicked(faction)">

                    @{
                        var banned = faction.Banned && EnableBanMode ? "colorless" : string.Empty;
                    }
                    <img 
                        class="icon link @banned" 
                        src="@(PathProvider.GetFactionIconPath(faction.FactionName.ToString()))" 
                        alt="icon for @faction.FactionName"
                        title="@faction.FactionName"
                    >
                </div>
            }
        }
    </div>
}

@code {
    private List<FactionModel>? _factions = new List<FactionModel>();

    [Parameter]
    public EventCallback<FactionModel> OnFactionClickGetFaction { get; set; }

    [Parameter]
    public EventCallback<IReadOnlyCollection<FactionModel>> OnInitializeGetFactions { get; set; }

    [Parameter]
    public bool EnableBanMode { get; set; } = false;

    [Parameter]
    public bool BanAllFactions { get; set; } = false;

    public IReadOnlyCollection<FactionModel>? Factions => _factions;

    protected override async Task OnInitializedAsync()
    {
        _factions = await HttpClient.GetAsync<List<FactionModel>>(Paths.ApiPath_Factions);
        await OnInitializeGetFactions.InvokeAsync(Factions);

        if (BanAllFactions)
            SetAllFactionsBanStatus(true);
    }

    private void FactionClicked(FactionModel selectedFaction)
    {
        if (EnableBanMode)
            selectedFaction.Banned = !selectedFaction.Banned;

        OnFactionClickGetFaction.InvokeAsync(selectedFaction);
    }

    public void SetAllFactionsBanStatus(bool banStatus)
    {
        if (_factions is not null)
            _factions.ForEach(x => x.Banned = banStatus);
    }
}
