@using System.Globalization;
@using TwilightImperiumUltimate.Web.Models.Cards;
@using TwilightImperiumUltimate.Web.Resources;
@using TwilightImperiumUltimate.Web.Services.Language;
@using TwilightImperiumUltimate.Web.Services.Path;
@using TwilightImperiumUltimate.Web.Services.HttpClients;
@inject ITwilightImperiumApiHttpClient HttpCLient
@inject IPathProvider PathProvider

@if (_listOfCards is not null)
{
    <div class="image-grid">

        @foreach (var card in _listOfCards)
        {
            card.ImagePath = card.ImagePath.Replace(Strings.LanguagePlaceholder, CultureInfo.CurrentCulture.Name);
            <div class="clickable" @onclick="@(() => ShowBigImage(@card, CultureInfo.CurrentCulture.Name))">
                <VerticalCard ImagePath="@card.ImagePath" TypeOfCard="@TypeOfCard"/>
            </div>
        }
    </div>

    @if (showBigImage)
    {
        <div class="big-image-overlay" @onclick="HideBigImage">
            <div class="image-container">
                <img src="@currentBigImageSrc" @onclick="HideBigImage" />
            </div>
            <div id="language-menu">
                <img src="@(GetCultureIconPath(Strings.EnglishCulture))"
                     alt="English"
                     height="50"
                     @onclick="@(() =>SetBigImageAddress(Strings.EnglishCulture))"
                     @onclick:stopPropagation="true" />
                <img src="@(GetCultureIconPath(Strings.CzechCulture))"
                     alt="Czech"
                     height="50"
                     @onclick="@(() =>SetBigImageAddress(Strings.CzechCulture))"
                     @onclick:stopPropagation="true" />
            </div>
        </div>
    }
}

@code {
    private List<BaseCardModel>? _listOfCards;

    private bool showBigImage = false;

    private string currentBigImageSrc = string.Empty;

    private string currentBigImageCulture = string.Empty;

    [Parameter]
    public string TypeOfCard { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _listOfCards = await HttpCLient.GetAsync<List<BaseCardModel>>(string.Concat(Paths.ApiPath_Cards, TypeOfCard));

        StateHasChanged();
    }

    private void ShowBigImage(BaseCardModel card, string culture)
    {
        currentBigImageSrc = card.ImagePath;
        currentBigImageCulture = culture;
        showBigImage = true;
    }

    private void HideBigImage()
    {
        showBigImage = false;
    }

    private string GetCultureIconPath(string culture)
    {
        return PathProvider.GetCultureIconPath(culture);
    }

    private void SetBigImageAddress(string culture)
    {
        currentBigImageSrc = currentBigImageSrc.Replace(currentBigImageCulture, culture);
        currentBigImageCulture = culture;
        StateHasChanged();
    }
}
