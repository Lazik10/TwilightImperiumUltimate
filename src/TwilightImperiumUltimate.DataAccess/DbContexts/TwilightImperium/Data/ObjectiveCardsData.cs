namespace TwilightImperiumUltimate.DataAccess.DbContexts.TwilightImperium.Data;

internal static class ObjectiveCardsData
{
    internal static List<ObjectiveCard> ObjectiveCards => new()
    {
        // First Stage
        new() { EnumName = ObjectiveCardName.AMassWealth, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.BuildDefenses, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.CornerTheMarket, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.DevelopWeaponry, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.DiscoverLostOutposts, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.DiversifyResearch, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.EngineerAMarvel, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.ErectAMonument, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.ExpandBorders, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.ExploreDeepSpace, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.FoundResearchOutposts, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.ImproveInfrastructure, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.IntimidateCouncil, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.LeadFromTheFront, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.MakeHistory, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.NegotiateTradeRoutes, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.PopulateTheOuterRim, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.PushBoundaries, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.RaiseAFleet, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.SwayTheCouncil, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageOne, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },

        // Second Stage
        new() { EnumName = ObjectiveCardName.AchieveSupremacy, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.BecomeALegend, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.CentralizeGalacticTrade, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.CommandAnArmada, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.ConquerTheWeak, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.ConstructMassiveCities, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.ControlTheBorderlands, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.FormGalacticBrainTrust, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.FoundAGoldenAge, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.GalvanizeThePeople, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.HoldVastReserves, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.ManipulateGalacticLaw, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.MasterTheSciences, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.PatrolVastTerritories, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.ProtectTheBorder, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.ReclaimAncientMonuments, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.RevolutionizeWarfare, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.RuleDistantLands, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.SubdueTheGalaxy, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.UnifyTheColonies, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.StageTwo, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },

        // Secrets
        new() { EnumName = ObjectiveCardName.AdaptNewStrategies, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.BecomeAMartyr, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
        new() { EnumName = ObjectiveCardName.BecomeTheGatekeeper, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.BetrayAFriend, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
        new() { EnumName = ObjectiveCardName.BraveTheVoid, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
        new() { EnumName = ObjectiveCardName.ControlTheRegion, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.CutSupplyLines, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.DarkenTheSkies, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
        new() { EnumName = ObjectiveCardName.DefySpaceAndTime, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.DemonstrateYourPower, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
        new() { EnumName = ObjectiveCardName.DestroyHereticalWorks, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.DestroyTheirGreatestShip, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action, },
        new() { EnumName = ObjectiveCardName.DictatePolicy, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StrategyPhase },
        new() { EnumName = ObjectiveCardName.DriveTheDebate, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StrategyPhase },
        new() { EnumName = ObjectiveCardName.EstablishAPerimeter, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.EstablishHegemony, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.FightWithPrecision, GameVersion = GameVersion.Deprecated, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
        new() { EnumName = ObjectiveCardName.FightWithPrecisionOmega, GameVersion = GameVersion.CodexVigil, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
        new() { EnumName = ObjectiveCardName.ForgeAnAlliance, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.FormASpyNetwork, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.FosterCohesion, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.FuelTheWarMachine, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.GatherAMightyFleet, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.HoardRawMaterials, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.LearnTheSecretsOfTheCosmos, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.MakeAnExampleOfTheirWorld, GameVersion = GameVersion.Deprecated, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
        new() { EnumName = ObjectiveCardName.MakeAnExampleOfTheirWorldOmega, GameVersion = GameVersion.CodexVigil, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
        new() { EnumName = ObjectiveCardName.MasterTheLawsOfPhysics, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.MechanizeTheMilitary, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.MineRareMinerals, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.MonopolizeProduction, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.OccupyTheFringe, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.OccupyTheSeatOfTheEmpire, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.ProduceEnMasse, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.ProveEndurance, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
        new() { EnumName = ObjectiveCardName.SeizeAnIcon, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.SparkARebellion, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
        new() { EnumName = ObjectiveCardName.StakeYourClaim, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.StrengthenBonds, GameVersion = GameVersion.ProphecyOfKings, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.ThreatenEnemies, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.StatusPhase },
        new() { EnumName = ObjectiveCardName.TurnTheirFleetsToDust, GameVersion = GameVersion.Deprecated, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
        new() { EnumName = ObjectiveCardName.TurnTheirFleetsToDustOmega, GameVersion = GameVersion.CodexVigil, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
        new() { EnumName = ObjectiveCardName.UnveilFlagship, GameVersion = GameVersion.BaseGame, ObjectiveCardType = ObjectiveCardType.Secret, Type = CardType.Objective, TimingWindow = TimingWindow.Action },
    };
}
