namespace TwilightImperiumUltimate.DataAccess.DbContexts.TwilightImperium.Data;

internal static class ActionCardsData
{
    internal static List<ActionCard> ActionCards => new List<ActionCard>
    {
        new() { EnumName = ActionCardName.AncientBurialSites, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.ArchaeologicalExpedition, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.AssassinateRepresentative, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Blitz, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.Bribery, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Bunker, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.ConfoundingLegalText, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.ConfusingLegalText, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.ConstructionRider, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Counterstroke, TimingWindow = TimingWindow.Reaction, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.CoupDetat, TimingWindow = TimingWindow.Reaction, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.CourageousToTheEnd, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.CrippleDefenses, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.DeadlyPlot, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.DecoyOperation, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.DiplomacyRider, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.DiplomaticPressure, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.DirectHit, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Disable, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.DistinguishedCouncilor, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.DivertFunding, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.EconomicInitiative, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.EmergencyRepairs, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.ExperimentalBattlestation, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.ExplorationProbe, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.FighterConscription, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.FighterPrototype, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.FireTeam, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.FlankSpeed, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.FocusedResearch, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.ForwardSupplyBase, TimingWindow = TimingWindow.Reaction, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.FrontlineDeployment, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.GhostShip, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.GhostSquad, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.HackElection, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.HarnessEnergy, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.ImperialRider, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Impersonation, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.InTheSilenceOfSpace, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.IndustrialInitiative, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Infiltrate, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.InsiderInformation, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.Insubordination, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Intercept, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.LeadershipRider, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.LostStarChart, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.LuckyShot, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.ManeuveringJets, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.ManipulateInvestments, TimingWindow = TimingWindow.StrategyPhase, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.MasterPlan, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.MiningInitiative, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.MoraleBoost, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.NavSuite, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.Parley, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Plagiarize, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.Plague, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.PoliticalStability, TimingWindow = TimingWindow.StatusPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.PoliticsRider, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.PublicDisgrace, TimingWindow = TimingWindow.StrategyPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Rally, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.ReactorMeltdown, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.RefitTroops, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.ReflectiveShielding, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.Reparations, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.RepealLaw, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.RevealPrototype, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.ReverseEngineer, TimingWindow = TimingWindow.Reaction, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.RiseOfAMessiah, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Rout, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.Sabotage, TimingWindow = TimingWindow.Reaction, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Salvage, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Sanction, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.ScrambleFrequency, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.Scuttle, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.SeizeArtifact, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.ProphecyOfKings },
        new() { EnumName = ActionCardName.ShieldsHolding, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.SignalJamming, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.SkilledRetreat, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.SolarFlare, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.Spy, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Summit, TimingWindow = TimingWindow.StrategyPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.TacticalBombardment, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.TechnologyRider, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.TradeRider, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.UnexpectedAction, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.UnstablePlanet, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Upgrade, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Uprising, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Veto, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.WarMachine, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.CodexOrdinian },
        new() { EnumName = ActionCardName.WarfareRider, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.BaseGame },
        new() { EnumName = ActionCardName.Waylay, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.ProphecyOfKings },

        new() { EnumName = ActionCardName.AbyssalStarpaths, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.AggressiveBroker, TimingWindow = TimingWindow.Reaction, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.AIAugury, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.Arbitrage, TimingWindow = TimingWindow.TacticalAction, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.BountyContracts, TimingWindow = TimingWindow.StatusPhase, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.CarapacePlating, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.ClassifiedWeapons, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.ConfusedSage, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.Contagion, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.EchoShielding, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.EmergencyMeeting, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.EscapeClause, TimingWindow = TimingWindow.Reaction, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.ForbiddenKnowledge, TimingWindow = TimingWindow.Reaction, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.FreeTradeInitiative, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.FreedomFighters, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.FulfillmentProtocols, TimingWindow = TimingWindow.Reaction, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.HostileWorld, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.IllusoryDuplication, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.MicrometeoroidSwarm, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.NeuralHammer, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.PersonnelWrit, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.PlanetaryRigs, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.Preparation, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.ProfessionalArchaeologists, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.RemnantCollection, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.Renegotiation, TimingWindow = TimingWindow.Reaction, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.SafetyOverrides, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.SecuredTrove, TimingWindow = TimingWindow.Action, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.SingularityCharge, TimingWindow = TimingWindow.Combat, GameVersion = GameVersion.UnchartedSpace },
        new() { EnumName = ActionCardName.SpecialSession, TimingWindow = TimingWindow.AgendaPhase, GameVersion = GameVersion.UnchartedSpace },
    };
}
