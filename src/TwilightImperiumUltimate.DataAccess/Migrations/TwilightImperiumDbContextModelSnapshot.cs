// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TwilightImperiumUltimate.DataAccess.DbContexts.TwilightImperium;

#nullable disable

namespace TwilightImperiumUltimate.DataAccess.Migrations
{
    [DbContext(typeof(TwilightImperiumDbContext))]
    partial class TwilightImperiumDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Cards.ActionCard", b =>
                {
                    b.Property<int>("ActionCardName")
                        .HasColumnType("integer")
                        .HasColumnName("ActionCardName");

                    b.Property<int>("ActionCardWindow")
                        .HasColumnType("integer")
                        .HasColumnName("ActionCardWindow");

                    b.Property<int>("GameVersion")
                        .HasColumnType("integer")
                        .HasColumnName("GameVersion");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.HasKey("ActionCardName");

                    b.ToTable("ActionCards", "Card");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Cards.AgendaCard", b =>
                {
                    b.Property<int>("AgendaCardName")
                        .HasColumnType("integer")
                        .HasColumnName("AgendaCardName");

                    b.Property<int>("AgendaCardType")
                        .HasColumnType("integer")
                        .HasColumnName("AgendaCardType");

                    b.Property<int>("GameVersion")
                        .HasColumnType("integer")
                        .HasColumnName("GameVersion");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.HasKey("AgendaCardName");

                    b.ToTable("AgendaCards", "Card");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Cards.ExplorationCard", b =>
                {
                    b.Property<int>("ExplorationCardName")
                        .HasColumnType("integer")
                        .HasColumnName("ExplorationCardName");

                    b.Property<int>("ExplorationPlanetTrait")
                        .HasColumnType("integer")
                        .HasColumnName("ExplorationPlanetTrait");

                    b.Property<int>("GameVersion")
                        .HasColumnType("integer")
                        .HasColumnName("GameVersion");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.HasKey("ExplorationCardName");

                    b.ToTable("ExplorationCards", "Card");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Cards.FrontierCard", b =>
                {
                    b.Property<int>("FrontierCardName")
                        .HasColumnType("integer")
                        .HasColumnName("FrontierCardName");

                    b.Property<int>("GameVersion")
                        .HasColumnType("integer")
                        .HasColumnName("GameVersion");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.HasKey("FrontierCardName");

                    b.ToTable("FrontierCards", "Card");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Cards.ObjectiveCard", b =>
                {
                    b.Property<int>("ObjectiveCardName")
                        .HasColumnType("integer")
                        .HasColumnName("ObjectiveCardName");

                    b.Property<int>("GameVersion")
                        .HasColumnType("integer")
                        .HasColumnName("GameVersion");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("ObjectiveCardType")
                        .HasColumnType("integer")
                        .HasColumnName("ObjectiveCardType");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.HasKey("ObjectiveCardName");

                    b.ToTable("ObjectiveCards", "Card");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Cards.PromissaryNoteCard", b =>
                {
                    b.Property<int>("PromissaryNoteCardName")
                        .HasColumnType("integer")
                        .HasColumnName("PromissaryNoteCardName");

                    b.Property<int>("Faction")
                        .HasColumnType("int");

                    b.Property<int>("GameVersion")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PromissaryNoteCardName");

                    b.ToTable("PromissaryNoteCards", "Card");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Cards.RelicCard", b =>
                {
                    b.Property<int>("RelicCardName")
                        .HasColumnType("integer")
                        .HasColumnName("RelicCardName");

                    b.Property<int>("GameVersion")
                        .HasColumnType("integer")
                        .HasColumnName("GameVersion");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.HasKey("RelicCardName");

                    b.ToTable("RelicCards", "Card");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Cards.StrategyCard", b =>
                {
                    b.Property<int>("StrategyCardName")
                        .HasColumnType("integer")
                        .HasColumnName("StrategyCardName");

                    b.Property<int>("GameVersion")
                        .HasColumnType("integer")
                        .HasColumnName("GameVersion");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImagePath");

                    b.Property<int>("InitiativeOrder")
                        .HasColumnType("integer")
                        .HasColumnName("InitiativeOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("PrimaryAbilityText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PrimaryAbilityText");

                    b.Property<string>("SecondaryAbilityText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SecondaryAbilityText");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.HasKey("StrategyCardName");

                    b.ToTable("StrategyCards", "Card");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Factions.Faction", b =>
                {
                    b.Property<int>("FactionName")
                        .HasColumnType("integer")
                        .HasColumnName("FactionName");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Commodities")
                        .HasColumnType("int");

                    b.Property<int>("ComplexityRating")
                        .HasColumnType("int");

                    b.Property<int>("GameVersion")
                        .HasColumnType("int");

                    b.Property<string>("History")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeSystem")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("PromissaryNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemStats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FactionName");

                    b.ToTable("Factions", "Faction");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Factions.FactionColorImportance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("integer")
                        .HasColumnName("Color");

                    b.Property<int>("FactionName")
                        .HasColumnType("integer")
                        .HasColumnName("FactionName");

                    b.Property<int>("Importance")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FactionColorImportance", "Faction");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Galaxy.Planet", b =>
                {
                    b.Property<int>("PlanetName")
                        .HasColumnType("integer")
                        .HasColumnName("PlanetName");

                    b.Property<int>("GameVersion")
                        .HasColumnType("integer")
                        .HasColumnName("GameVersion");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Influence")
                        .HasColumnType("integer")
                        .HasColumnName("Influence");

                    b.Property<int>("IsLegendary")
                        .HasColumnType("integer")
                        .HasColumnName("IsLegendary");

                    b.Property<int>("PlanetTrait")
                        .HasColumnType("integer")
                        .HasColumnName("PlanetTrait");

                    b.Property<int>("Resources")
                        .HasColumnType("integer")
                        .HasColumnName("Resources");

                    b.Property<int>("SystemTileName")
                        .HasColumnType("integer");

                    b.Property<int>("TechnologySkip")
                        .HasColumnType("integer")
                        .HasColumnName("TechnologySkip");

                    b.HasKey("PlanetName");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("PlanetName"));

                    b.HasIndex("SystemTileName");

                    b.ToTable("Planets", "Galaxy");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Galaxy.SystemTile", b =>
                {
                    b.Property<int>("SystemTileName")
                        .HasColumnType("integer")
                        .HasColumnName("SystemTileName");

                    b.Property<int>("Anomaly")
                        .HasColumnType("integer")
                        .HasColumnName("Anomaly");

                    b.Property<int>("FactionName")
                        .HasColumnType("integer")
                        .HasColumnName("FactionName");

                    b.Property<int>("GameVersion")
                        .HasColumnType("integer")
                        .HasColumnName("GameVersion");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TileCategory")
                        .HasColumnType("integer")
                        .HasColumnName("TileCategory");

                    b.HasKey("SystemTileName");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("SystemTileName"));

                    b.ToTable("SystemTiles", "Galaxy");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Galaxy.Wormhole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameVersion")
                        .HasColumnType("int")
                        .HasColumnName("GameVersion");

                    b.Property<int>("SystemTileName")
                        .HasColumnType("int")
                        .HasColumnName("SystemTileName");

                    b.Property<int>("WormholeName")
                        .HasColumnType("int")
                        .HasColumnName("WormholeName");

                    b.HasKey("Id");

                    b.HasIndex("SystemTileName");

                    b.ToTable("Wormholes", "Galaxy");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.News.NewsArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("Content");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Title");

                    b.Property<DateOnly>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedAt");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("UserId");

                    b.ToTable("NewsArticles", "News");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Player.Player", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name");

                    b.Property<int>("Color")
                        .HasColumnType("integer")
                        .HasColumnName("Color");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Players", "Player");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.RelationshipEntities.FactionTechnology", b =>
                {
                    b.Property<int>("FactionName")
                        .HasColumnType("integer")
                        .HasColumnName("FactionName");

                    b.Property<int>("TechnologyName")
                        .HasColumnType("integer")
                        .HasColumnName("TechnologyName");

                    b.Property<int>("StartingTechnology")
                        .HasColumnType("integer")
                        .HasColumnName("StartingTechnology");

                    b.HasKey("FactionName", "TechnologyName");

                    b.HasIndex("TechnologyName");

                    b.ToTable("FactionTechnology", "Relationships");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.RelationshipEntities.FactionUnit", b =>
                {
                    b.Property<int>("FactionName")
                        .HasColumnType("integer");

                    b.Property<int>("UnitName")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("FactionName", "UnitName");

                    b.HasIndex("UnitName");

                    b.ToTable("FactionUnit", "Relationships");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Rules.Rule", b =>
                {
                    b.Property<int>("RuleCategory")
                        .HasColumnType("integer")
                        .HasColumnName("RuleCategory");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("Content");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("RuleCategory");

                    b.ToTable("Rules", "Rule");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Technologies.Technology", b =>
                {
                    b.Property<int>("TechnologyName")
                        .HasColumnType("integer")
                        .HasColumnName("TechnologyName");

                    b.Property<int>("FactionName")
                        .HasColumnType("integer")
                        .HasColumnName("FactionName");

                    b.Property<int>("GameVersion")
                        .HasColumnType("integer")
                        .HasColumnName("GameVersion");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFactionTechnology")
                        .HasColumnType("bit")
                        .HasColumnName("IsFactionTechnology");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("Level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.HasKey("TechnologyName");

                    b.ToTable("Technologies", "Technology");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Units.Unit", b =>
                {
                    b.Property<int>("UnitName")
                        .HasColumnType("integer")
                        .HasColumnName("UnitName");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("Capacity");

                    b.Property<int>("Combat")
                        .HasColumnType("integer")
                        .HasColumnName("Combat");

                    b.Property<int>("Cost")
                        .HasColumnType("integer")
                        .HasColumnName("Cost");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Move")
                        .HasColumnType("integer")
                        .HasColumnName("Move");

                    b.Property<int>("UnitType")
                        .HasColumnType("integer")
                        .HasColumnName("UnitType");

                    b.HasKey("UnitName");

                    b.ToTable("Units", "Unit");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("Age");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Nickname");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Users", "User");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Galaxy.Planet", b =>
                {
                    b.HasOne("TwilightImperiumUltimate.Core.Entities.Galaxy.SystemTile", "SystemTile")
                        .WithMany("Planets")
                        .HasForeignKey("SystemTileName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemTile");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Galaxy.Wormhole", b =>
                {
                    b.HasOne("TwilightImperiumUltimate.Core.Entities.Galaxy.SystemTile", "SystemTile")
                        .WithMany("Wormholes")
                        .HasForeignKey("SystemTileName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemTile");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.News.NewsArticle", b =>
                {
                    b.HasOne("TwilightImperiumUltimate.Core.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.RelationshipEntities.FactionTechnology", b =>
                {
                    b.HasOne("TwilightImperiumUltimate.Core.Entities.Factions.Faction", "Faction")
                        .WithMany("FactionTechnologies")
                        .HasForeignKey("FactionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwilightImperiumUltimate.Core.Entities.Technologies.Technology", "Technology")
                        .WithMany("FactionTechnologies")
                        .HasForeignKey("TechnologyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.RelationshipEntities.FactionUnit", b =>
                {
                    b.HasOne("TwilightImperiumUltimate.Core.Entities.Factions.Faction", "Faction")
                        .WithMany("FactionUnits")
                        .HasForeignKey("FactionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwilightImperiumUltimate.Core.Entities.Units.Unit", "Unit")
                        .WithMany("FactionUnits")
                        .HasForeignKey("UnitName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Factions.Faction", b =>
                {
                    b.Navigation("FactionTechnologies");

                    b.Navigation("FactionUnits");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Galaxy.SystemTile", b =>
                {
                    b.Navigation("Planets");

                    b.Navigation("Wormholes");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Technologies.Technology", b =>
                {
                    b.Navigation("FactionTechnologies");
                });

            modelBuilder.Entity("TwilightImperiumUltimate.Core.Entities.Units.Unit", b =>
                {
                    b.Navigation("FactionUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
